from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.db_utils import add_token_history, get_all_user_tokens, save_token_chain, get_all_logins, get_password_by_login
from app.database import AsyncSessionLocal
from app.wialon_api import create_token, update_token, wialon_login
from app.bot_utils import get_tor_choice_keyboard
import json
import logging
import datetime
from fastapi import Form, HTTPException, APIRouter

router = APIRouter()
logger = logging.getLogger(__name__)

class TokenStates(StatesGroup):
    choosing_input_method = State()
    choosing_login = State()
    choosing_master_token = State()
    waiting_for_master_token = State()
    waiting_for_access_rights = State()
    waiting_for_duration = State()
    waiting_for_label = State()
    waiting_for_token_to_update = State()

@router.message(Command(commands=["token_create"]))
async def token_create_handler(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API."""
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    callback_data="token_create_saved"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é",
                    callback_data="token_create_manual"
                )
            ]
        ]
    )
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:",
        reply_markup=keyboard
    )
    await state.set_state(TokenStates.choosing_input_method)

@router.callback_query(lambda c: c.data == "token_create_saved")
async def process_token_create_saved(callback_query: types.CallbackQuery, state: FSMContext):
    logger.debug("[process_token_create_saved] called")
    await callback_query.answer()
    
    async with AsyncSessionLocal() as session:
        logins = await get_all_logins(session)
        logger.debug(f"[process_token_create_saved] logins={logins}")
    
    if not logins:
        await callback_query.message.edit_text(
            "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞."
        )
        logger.debug("[process_token_create_saved] No logins found")
        return
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=login, callback_data=f"token_create_login:{login}")]
        for login in logins
    ])
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å:",
        reply_markup=keyboard
    )
    logger.debug(f"[process_token_create_saved] presented logins: {logins}")
    await state.set_state(TokenStates.choosing_login)

@router.callback_query(lambda c: c.data.startswith("token_create_login:"))
async def process_token_create_login(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞."""
    await callback_query.answer()
    
    login = callback_query.data.split(":")[1]
    logger.debug(f"[process_token_create_login] login={login}")
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ª–æ–≥–∏–Ω–∞
        password = await get_password_by_login(session, login)
        logger.debug(f"[process_token_create_login] password={'***' if password else None}")
        if not password:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏."
            )
            return
            
        # –ü—Ä–æ–±—É–µ–º –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
        login_result = wialon_login(login, password)
        logger.debug(f"[process_token_create_login] login_result={login_result}")
        if "error" in login_result:
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Wialon: {login_result.get('error')}"
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ–≥–∏–Ω–∞
        tokens = await get_all_user_tokens(session)
        logger.debug(f"[process_token_create_login] all tokens={tokens}")
        user_tokens = [t for t in tokens if t.get("user_name") == login and t.get("type") == "master"]
        logger.debug(f"[process_token_create_login] user_tokens={user_tokens}")
        if not user_tokens:
            await callback_query.message.edit_text(
                "‚ùå –î–ª—è —ç—Ç–æ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω–æ–≤."
            )
            return
            
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text=f"üîë {t['token'][:8]}...{t['token'][-4:]}",
                callback_data=f"token_create_select:{t['token']}"
            )]
            for t in user_tokens
        ])
        
        await callback_query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω –¥–ª—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ {login}:",
            reply_markup=keyboard
        )
        await state.set_state(TokenStates.choosing_master_token)

@router.callback_query(lambda c: c.data.startswith("token_create_select:"))
async def process_token_create_select(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω–∞."""
    await callback_query.answer()
    
    token = callback_query.data.split(":")[1]
    await state.update_data(master_token=token)
    
    access_flags_table = (
        "\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–ª–∞–≥–∏ –ø—Ä–∞–≤ (uacl):</b>\n"
        "<pre>"
        "0x100   ‚Äî online tracking\n"
        "0x200   ‚Äî view access to most data\n"
        "0x400   ‚Äî modification of non-sensitive data\n"
        "0x800   ‚Äî modification of sensitive data\n"
        "0x1000  ‚Äî modification of critical data (incl. messages deletion)\n"
        "0x2000  ‚Äî communication\n"
        "-1      ‚Äî unlimited operation as authorized user (manage user tokens)\n"
        "</pre>\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>0xFFFFFFFF</code> (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è).\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (uacl) –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0xFFFFFFFF, 0x1, 0x2000):"
    )
    await callback_query.message.edit_text(access_flags_table, parse_mode="HTML")
    await state.set_state(TokenStates.waiting_for_access_rights)

@router.callback_query(lambda c: c.data == "token_create_manual")
async def process_token_create_manual(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞."""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω:",
        parse_mode="HTML"
    )
    await state.set_state(TokenStates.waiting_for_master_token)

@router.message(TokenStates.waiting_for_master_token)
async def process_master_token_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É—é –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω–∞."""
    token = message.text.strip()
    await state.update_data(master_token=token)
    
    access_flags_table = (
        "\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–ª–∞–≥–∏ –ø—Ä–∞–≤ (uacl):</b>\n"
        "<pre>"
        "0x100   ‚Äî online tracking\n"
        "0x200   ‚Äî view access to most data\n"
        "0x400   ‚Äî modification of non-sensitive data\n"
        "0x800   ‚Äî modification of sensitive data\n"
        "0x1000  ‚Äî modification of critical data (incl. messages deletion)\n"
        "0x2000  ‚Äî communication\n"
        "-1      ‚Äî unlimited operation as authorized user (manage user tokens)\n"
        "</pre>\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>0xFFFFFFFF</code> (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è).\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (uacl) –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0xFFFFFFFF, 0x1, 0x2000):"
    )
    await message.reply(access_flags_table, parse_mode="HTML")
    await state.set_state(TokenStates.waiting_for_access_rights)

@router.message(TokenStates.waiting_for_access_rights)
async def process_access_rights(message: types.Message, state: FSMContext):
    uacl = message.text.strip()
    await state.update_data(access_rights=uacl)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 86400 –¥–ª—è 1 –¥–Ω—è). –ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (10 –ª–µ—Ç):")
    await state.set_state(TokenStates.waiting_for_duration)

@router.message(TokenStates.waiting_for_duration)
async def process_duration(message: types.Message, state: FSMContext):
    try:
        duration = int(message.text.strip()) if message.text.strip() else 315360000
        if duration <= 0:
            raise ValueError
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (—Å–µ–∫—É–Ω–¥—ã):")
        return
    
    await state.update_data(duration=duration)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫—É (label) –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(TokenStates.waiting_for_label)

@router.message(TokenStates.waiting_for_label)
async def process_label(message: types.Message, state: FSMContext):
    label = message.text.strip()
    if label == "-":
        label = None
    
    await state.update_data(label=label)
    data = await state.get_data()
    
    try:
        result = await create_token(
            data["master_token"], 
            data["access_rights"], 
            data["duration"], 
            label
        )
        new_token = result.get("token")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with AsyncSessionLocal() as session:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            await add_token_history(
                session, 
                "API",  # –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                new_token,
                "create",
                {"label": label}
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            success = await save_token_chain(
                session,
                None,  # username –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
                None,  # password –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
                data["master_token"],
                new_token,
                creation_method="API",
                access_rights=int(data["access_rights"], 0) if data["access_rights"].startswith("0x") else int(data["access_rights"]),
                duration=data["duration"],
                expires_at=datetime.datetime.utcnow() + datetime.timedelta(seconds=data["duration"]) if data["duration"] else None
            )
            
            if success:
                await message.reply(
                    f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                    f"üîë <code>{new_token}</code>\n"
                    f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} —Å–µ–∫\n"
                    f"üîí –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {data['access_rights']}\n"
                    f"üè∑ –ú–µ—Ç–∫–∞: {label if label else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
                    parse_mode="HTML"
                )
            else:
                await message.reply(
                    f"‚ö†Ô∏è –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:\n"
                    f"<code>{new_token}</code>",
                    parse_mode="HTML"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
    finally:
        await state.clear()

@router.message(Command(commands=["token_update"]))
async def token_update_handler(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    async with AsyncSessionLocal() as session:
        user_tokens = await get_all_user_tokens(session)
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(
                text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é", 
                callback_data="token_update_manual"
            )]
        ]
    )
    
    if user_tokens:
        for i, token_data in enumerate(user_tokens[:5]):
            token = token_data["token"]
            user_info = f" ({token_data['user_name']})" if "user_name" in token_data else ""
            keyboard.inline_keyboard.insert(i, [
                types.InlineKeyboardButton(
                    text=f"üîë –¢–æ–∫–µ–Ω #{i+1}{user_info}", 
                    callback_data=f"token_update:{i}"
                )
            ])
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
    else:
        message_text = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
    
    await message.reply(message_text, reply_markup=keyboard)
    await state.set_state(TokenStates.waiting_for_token_to_update)

@router.callback_query(lambda c: c.data.startswith("token_update:"))
async def process_token_update_choice(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    index = int(callback_query.data.split(":")[1])
    async with AsyncSessionLocal() as session:
        user_tokens = await get_all_user_tokens(session)
    token = user_tokens[index]["token"]
    await state.update_data(token_to_update=token)
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (uacl) –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0xFFFFFFFF):",
        parse_mode="HTML"
    )
    await state.set_state(TokenStates.waiting_for_access_rights)

@router.message(TokenStates.waiting_for_token_to_update)
async def process_token_to_update(message: types.Message, state: FSMContext):
    token = message.text.strip()
    await state.update_data(token_to_update=token)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (uacl) –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0xFFFFFFFF):")
    await state.set_state(TokenStates.waiting_for_access_rights)

@router.post("/token_create")
async def token_create(
    master_token: str = Form(...),
    access_rights: str = Form(...),
    duration: int = Form(...),
    label: str = Form(None)
):
    try:
        result = await create_token(master_token, access_rights, duration, label)
        new_token = result.get("token")
        
        async with AsyncSessionLocal() as session:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            await add_token_history(
                session,
                "API",  # –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                new_token,
                "create",
                {"label": label}
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            success = await save_token_chain(
                session,
                None,  # username –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
                None,  # password –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
                master_token,
                new_token,
                creation_method="API",
                access_rights=int(access_rights, 0) if access_rights.startswith("0x") else int(access_rights),
                duration=duration,
                expires_at=datetime.datetime.utcnow() + datetime.timedelta(seconds=duration) if duration else None
            )
            
            if success:
                return {
                    "status": "success",
                    "token": new_token,
                    "message": "Token created and saved successfully"
                }
            else:
                return {
                    "status": "warning",
                    "token": new_token,
                    "message": "Token created but not saved to database"
                }
                
    except Exception as e:
        logger.error(f"Error creating token: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/token_create_custom")
async def token_create_custom(
    master_token: str = Form(...),
    access_rights: str = Form(...),
    duration: int = Form(...),
    label: str = Form(None),
    custom_data: str = Form(...)
):
    try:
        result = await create_token(master_token, access_rights, duration, label)
        new_token = result.get("token")
        
        async with AsyncSessionLocal() as session:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await add_token_history(
                session,
                "API",
                new_token,
                "create",
                {
                    "label": label,
                    "custom_data": json.loads(custom_data)
                }
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            success = await save_token_chain(
                session,
                None,
                None,
                master_token,
                new_token,
                creation_method="API",
                access_rights=int(access_rights, 0) if access_rights.startswith("0x") else int(access_rights),
                duration=duration,
                expires_at=datetime.datetime.utcnow() + datetime.timedelta(seconds=duration) if duration else None,
                custom_data=json.loads(custom_data)
            )
            
            if success:
                return {
                    "status": "success",
                    "token": new_token,
                    "message": "Token created and saved successfully"
                }
            else:
                return {
                    "status": "warning",
                    "token": new_token,
                    "message": "Token created but not saved to database"
                }
                
    except Exception as e:
        logger.error(f"Error creating token: {e}")
        raise HTTPException(status_code=500, detail=str(e))
