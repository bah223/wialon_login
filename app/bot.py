from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.db_utils import add_token_history, get_user_by_username, save_token_chain, get_password_by_login
from app.wialon_api import check_token, create_token, get_available_objects
from app.models import MasterToken, User, WialonAccount, Token, TokenType
import datetime
import json

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
from app.scraper import wialon_login_and_get_url, make_api_request
from app.utils import logger, get_env_variable, get_bool_env_variable, is_user_allowed, encrypt_password, decrypt_password
from app.database import AsyncSessionLocal, check_db_connection
from app.db_utils import create_or_update_user, get_all_user_tokens, get_user_by_username
from app.bot_utils import (
    choose_check_mode, get_tor_choice_keyboard, get_manual_token_keyboard, get_confirm_delete_all_keyboard, get_connection_choice_keyboard, get_saved_creds_connection_keyboard,
    handle_check_token_manual, handle_token_input, handle_check_specific_token, handle_check_mode_choice
)
from app.handlers_login import router as login_router
from app.handlers_history import router as history_router
from app.handlers_delete import router as delete_router
from app.states import GetTokenStates, CustomTokenStates  # –û–±–Ω–æ–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from sqlalchemy import select
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import selectinload

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=get_env_variable("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ handler –¥–ª—è –ª–æ–≥–∏–Ω–∞ ---
dp.include_router(login_router)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ handler –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π ---
dp.include_router(history_router)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ handler –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ ---
dp.include_router(delete_router)

class TokenCreateStates(StatesGroup):
    choose_login = State()
    choose_master = State()
    choose_rights = State()
    rights_manual = State()
    choose_duration = State()
    duration_manual = State()
    choose_connection = State()

@dp.message(Command(commands=['start', 'help']))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help."""
    if not is_user_allowed(message.from_user.id):
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    help_text = """
ü§ñ Wialon Token Bot

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/get_token - –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ OAuth (–±—Ä–∞—É–∑–µ—Ä)
/token_create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
/token_update - –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
/check_token - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Access Token –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
/my_tokens - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    await message.reply(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command(commands=['token_create']))
async def token_create_command(message: types.Message, state: FSMContext):
    async with AsyncSessionLocal() as session:
        accounts = await session.execute(select(WialonAccount))
        accounts = accounts.scalars().all()
    if not accounts:
        await message.reply("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ /get_token.")
        return
    buttons = [
        [types.InlineKeyboardButton(text=f"üë§ {acc.username}", callback_data=f"create_token_login:{acc.username}")]
        for acc in accounts
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", reply_markup=keyboard)
    await state.set_state(TokenCreateStates.choose_login)

@dp.callback_query(lambda c: c.data.startswith("create_token_login:"))
async def token_create_choose_login(callback_query: types.CallbackQuery, state: FSMContext):
    username = callback_query.data.split(":", 1)[1]
    async with AsyncSessionLocal() as session:
        account = await session.scalar(select(WialonAccount).where(WialonAccount.username == username))
        tokens = await session.execute(select(Token).where(Token.account_id == account.id, Token.token_type == TokenType.MASTER))
        master_tokens = tokens.scalars().all()
    if not master_tokens:
        await callback_query.message.edit_text(f"‚ùå –î–ª—è –ª–æ–≥–∏–Ω–∞ <b>{username}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω–∞.", parse_mode="HTML")
        return
    buttons = [
        [types.InlineKeyboardButton(text=f"üîë {t.token[:6]}...{t.token[-4:]}", callback_data=f"create_token_master:{t.id}")]
        for t in master_tokens
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω –¥–ª—è <b>{username}</b>:", reply_markup=keyboard, parse_mode="HTML")
    await state.update_data(username=username)
    await state.set_state(TokenCreateStates.choose_master)

@dp.callback_query(lambda c: c.data.startswith("create_token_master:"))
async def token_create_choose_master(callback_query: types.CallbackQuery, state: FSMContext):
    token_id = int(callback_query.data.split(":", 1)[1])
    async with AsyncSessionLocal() as session:
        token_obj = await session.get(Token, token_id)
    await state.update_data(master_token=token_obj.token)
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    buttons = [
        [types.InlineKeyboardButton(text="üßÖ –ß–µ—Ä–µ–∑ Tor", callback_data="create_token_conn:tor")],
        [types.InlineKeyboardButton(text="üöÄ –ù–∞–ø—Ä—è–º—É—é", callback_data="create_token_conn:direct")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(TokenCreateStates.choose_connection)

@dp.callback_query(lambda c: c.data.startswith("create_token_conn:"))
async def token_create_choose_connection(callback_query: types.CallbackQuery, state: FSMContext):
    conn_type = callback_query.data.split(":", 1)[1]
    use_tor = conn_type == "tor"
    await state.update_data(use_tor=use_tor)
    # –î–∞–ª–µ–µ ‚Äî –≤—ã–±–æ—Ä –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    rights = [
        ("0xFFFFFFFF", "–í—Å–µ –ø—Ä–∞–≤–∞"),
        ("0x1", "–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ"),
        ("0x7", "–ß—Ç–µ–Ω–∏–µ + –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"),
        ("custom", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
    ]
    buttons = [[types.InlineKeyboardButton(text=f"{r[0]} ‚Äî {r[1]}", callback_data=f"create_token_rights:{r[0]}")] for r in rights]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:", reply_markup=keyboard)
    await state.set_state(TokenCreateStates.choose_rights)

@dp.callback_query(lambda c: c.data.startswith("create_token_rights:"))
async def token_create_choose_rights(callback_query: types.CallbackQuery, state: FSMContext):
    uacl = callback_query.data.split(":", 1)[1]
    if uacl == "custom":
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0xFFFFFFFF):")
        await state.set_state(TokenCreateStates.rights_manual)
        return
    await state.update_data(uacl=uacl)
    durations = [
        (86400, "1 –¥–µ–Ω—å"),
        (604800, "7 –¥–Ω–µ–π"),
        (0, "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"),
        ("custom", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
    ]
    buttons = [[types.InlineKeyboardButton(text=f"{d[1]}", callback_data=f"create_token_duration:{d[0]}")] for d in durations]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞:", reply_markup=keyboard)
    await state.set_state(TokenCreateStates.choose_duration)

@dp.message(TokenCreateStates.rights_manual)
async def token_create_rights_manual(message: types.Message, state: FSMContext):
    uacl = message.text.strip()
    await state.update_data(uacl=uacl)
    durations = [
        (86400, "1 –¥–µ–Ω—å"),
        (604800, "7 –¥–Ω–µ–π"),
        (0, "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"),
        ("custom", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
    ]
    buttons = [[types.InlineKeyboardButton(text=f"{d[1]}", callback_data=f"create_token_duration:{d[0]}")] for d in durations]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞:", reply_markup=keyboard)
    await state.set_state(TokenCreateStates.choose_duration)

@dp.callback_query(lambda c: c.data.startswith("create_token_duration:"))
async def token_create_choose_duration(callback_query: types.CallbackQuery, state: FSMContext):
    duration = callback_query.data.split(":", 1)[1]
    if duration == "custom":
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
        await state.set_state(TokenCreateStates.duration_manual)
        return
    await state.update_data(duration=int(duration))
    await create_token_api(callback_query.message, state)

@dp.message(TokenCreateStates.duration_manual)
async def token_create_duration_manual(message: types.Message, state: FSMContext):
    try:
        duration = int(message.text.strip())
        await state.update_data(duration=duration)
        await create_token_api(message, state)
    except Exception:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ---
def parse_uacl(uacl: str) -> int:
    if uacl.lower() in ("0xffffffff", "-1"):
        return -1
    return int(uacl, 0)

# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π create_token_api ---
async def create_token_api(message, state):
    data = await state.get_data()
    master_token = data.get("master_token")
    uacl = data.get("uacl", "0xFFFFFFFF")
    duration = data.get("duration", 0)
    username = data.get("username")
    use_tor = data.get("use_tor", True)
    fl_value = parse_uacl(uacl)
    logger.info(f"[create_token_api] –°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API: master_token={master_token[:8]}..., uacl={uacl}, fl={fl_value}, duration={duration}, username={username}, use_tor={use_tor}")
    try:
        wialon_api_url = get_env_variable("WIALON_API_URL", "https://hst-api.wialon.com/wialon/ajax.html")
        # 1. –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ token/login
        login_params = {
            "svc": "token/login",
            "params": json.dumps({"token": master_token, "fl": 7})
        }
        logger.info(f"[create_token_api] login_params: {login_params}")
        login_result = await make_api_request(wialon_api_url, login_params, use_tor=use_tor)
        logger.info(f"[create_token_api] login_result: {login_result}")
        if "error" in login_result:
            await message.reply(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_result.get('error')} {login_result.get('reason', '')}")
            logger.error(f"[create_token_api] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_result}")
            await state.clear()
            return
        session_id = login_result.get("eid")
        user_id = login_result.get("user", {}).get("id")
        if not session_id or not user_id:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            logger.error(f"[create_token_api] –ù–µ—Ç session_id –∏–ª–∏ user_id: {login_result}")
            await state.clear()
            return
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ token/update
        params = {
            "callMode": "create",
            "userId": int(user_id),
            "h": "TOKEN",
            "app": "Wialon Hosting Custom Token",
            "at": 0,
            "dur": int(duration),
            "fl": fl_value,
            "p": "{}",
            "items": []
        }
        logger.info(f"[create_token_api] create_params: {params}")
        create_params = {
            "svc": "token/update",
            "params": json.dumps(params),
            "sid": session_id
        }
        logger.info(f"[create_token_api] create_params (final): {create_params}")
        create_result = await make_api_request(wialon_api_url, create_params, use_tor=use_tor)
        logger.info(f"[create_token_api] create_result: {create_result}")
        if "error" in create_result:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {create_result.get('reason', create_result.get('error'))}")
            logger.error(f"[create_token_api] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {create_result}")
            await state.clear()
            return
        new_token = create_result.get("h")
        if not new_token:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω")
            logger.error(f"[create_token_api] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞: {create_result}")
            await state.clear()
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ª–æ–≥–∏–Ω—É/–º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω—É
        async with AsyncSessionLocal() as session:
            account = await session.scalar(select(WialonAccount).where(WialonAccount.username == username))
            from app.db_utils import add_token
            await add_token(session, account.id, new_token, parent_token=master_token)
        await state.update_data(last_created_token=new_token)
        await message.reply(
            f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: <code>{new_token}</code>\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ /check_token",
            parse_mode="HTML"
        )
        logger.info(f"[create_token_api] –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {new_token}")
    except Exception as e:
        logger.error(f"[create_token_api] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    await state.clear()

@dp.callback_query(lambda c: c.data == "check_token_by_value")
async def check_token_by_value(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    token = data.get("last_created_token")
    if not token:
        await callback_query.message.edit_text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /check_token.")
        return
    use_tor = data.get("use_tor", True)
    logger.info(f"[check_token_by_value] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: {token[:8]}..., use_tor={use_tor}")
    try:
        wialon_api_url = get_env_variable("WIALON_API_URL", "https://hst-api.wialon.com/wialon/ajax.html")
        params = {
            "svc": "token/login",
            "params": json.dumps({"token": token, "fl": 1})
        }
        logger.info(f"[check_token_by_value] params: {params}")
        result = await make_api_request(wialon_api_url, params, use_tor=use_tor)
        logger.info(f"[check_token_by_value] result: {result}")
        if "error" in result:
            await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {result.get('error')} {result.get('reason', '')}")
            logger.error(f"[check_token_by_value] –û—à–∏–±–∫–∞: {result}")
            return
        user = result.get("user", {})
        expire_time = result.get("tm")
        expire_str = (
            datetime.datetime.fromtimestamp(expire_time).strftime('%Y-%m-%d %H:%M:%S')
            if expire_time else "N/A"
        )
        fl = result.get("fl", "N/A")
        objects_count = len(result.get("items", [])) if "items" in result else "N/A"
        msg = (
            f"‚úÖ <b>–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω!</b>\n"
            f"üë§ <b>User:</b> {user.get('nm', 'N/A')} (ID: {user.get('id', 'N/A')})\n"
            f"‚è≥ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expire_str}\n"
            f"üîë <b>–ü—Ä–∞–≤–∞ (fl):</b> {fl}\n"
            f"üì¶ <b>–û–±—ä–µ–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:</b> {objects_count}"
        )
        await callback_query.message.edit_text(msg, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"[check_token_by_value] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
    await state.clear()

@dp.message(Command(commands=['check_token']))
async def check_token_command(message: types.Message, state: FSMContext):
    async with AsyncSessionLocal() as session:
        tokens = await session.execute(select(Token).options(selectinload(Token.account)))
        tokens = tokens.scalars().all()
        if not tokens:
            await message.reply("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            await state.set_state(GetTokenStates.waiting_for_token_input)
            return
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        buttons = [
            [types.InlineKeyboardButton(text="üßÖ –ß–µ—Ä–µ–∑ Tor", callback_data="check_token_conn:tor")],
            [types.InlineKeyboardButton(text="üöÄ –ù–∞–ø—Ä—è–º—É—é", callback_data="check_token_conn:direct")]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", reply_markup=keyboard)
        await state.set_state(GetTokenStates.waiting_for_token_input)

@dp.callback_query(lambda c: c.data.startswith("check_token_conn:"))
async def check_token_choose_connection(callback_query: types.CallbackQuery, state: FSMContext):
    conn_type = callback_query.data.split(":", 1)[1]
    use_tor = conn_type == "tor"
    await state.update_data(use_tor=use_tor)
    # –î–∞–ª–µ–µ ‚Äî –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞
    async with AsyncSessionLocal() as session:
        tokens = await session.execute(select(Token).options(selectinload(Token.account)))
        tokens = tokens.scalars().all()
        buttons = [
            [types.InlineKeyboardButton(
                text=f"{t.token[:6]}...{t.token[-4:]} ({t.account.username if t.account else ''})",
                callback_data=f"check_token:{t.id}")]
            for t in tokens
        ]
        buttons.append([types.InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é", callback_data="check_token_manual")])
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=keyboard)
        await state.set_state(GetTokenStates.waiting_for_token_input)

@dp.callback_query(lambda c: c.data == "check_token_manual")
async def check_token_manual_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    await state.set_state(GetTokenStates.waiting_for_token_input)

@dp.callback_query(lambda c: c.data == "delete_all_tokens")
async def process_delete_all_tokens(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = get_confirm_delete_all_keyboard()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>–í–°–ï</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "confirm_delete_all")
async def process_confirm_delete_all(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    
    async with AsyncSessionLocal() as session:
        await delete_token(session, user_id)
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    await callback_query.message.edit_text(
        "‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "cancel_delete_all")
async def process_cancel_delete_all(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    await callback_query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–∫–µ–Ω–æ–≤
    await token_list_command(callback_query.message)

@dp.callback_query(lambda c: c.data == "use_saved_credentials")
async def process_use_saved_credentials(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    async with AsyncSessionLocal() as session:
        credentials = await get_credentials(session, callback_query.from_user.id)
    if not credentials:
        await callback_query.message.edit_text("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    keyboard = get_saved_creds_connection_keyboard()
    
    await callback_query.message.edit_text(
        f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è <b>{credentials['username']}</b>.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data.startswith("saved_creds_tor:"))
async def process_saved_creds_connection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    await callback_query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Tor
    use_tor = callback_query.data.split(":")[1] == "yes"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    async with AsyncSessionLocal() as session:
        credentials = await get_credentials(session, callback_query.from_user.id)
    if not credentials:
        await callback_query.message.edit_text("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    status_message = await callback_query.message.edit_text(
        f"üîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è <b>{credentials['username']}</b> {'—á–µ—Ä–µ–∑ Tor' if use_tor else '–Ω–∞–ø—Ä—è–º—É—é'}...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        logger.info(f"[process_saved_creds_connection] –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è user_id={callback_query.from_user.id}, username={credentials['username']}, use_tor={use_tor}")
        # –ü–æ–ª—É—á–∞–µ–º URL Wialon –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        try:
            wialon_url = get_env_variable("WIALON_BASE_URL")
        except Exception as e:
            logger.warning(f"[process_saved_creds_connection] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å WIALON_BASE_URL: {e}")
            wialon_url = "https://hosting.wialon.com/login.html?duration=0"
            logger.info(f"[process_saved_creds_connection] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π URL: {wialon_url}")
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        result = await wialon_login_and_get_url(
            credentials['username'], 
            credentials['password'], 
            wialon_url,
            use_tor=use_tor
        )
        logger.info(f"[process_saved_creds_connection] –û—Ç–≤–µ—Ç –æ—Ç wialon_login_and_get_url: {str(result)[:300]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if isinstance(result, dict):
            token = result.get("token", "")
            full_url = result.get("url", "")
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            token = extract_token_from_url(result)
            full_url = result
        logger.info(f"[process_saved_creds_connection] –ò–∑–≤–ª–µ—á—ë–Ω —Ç–æ–∫–µ–Ω: {token[:8]}... (–¥–ª–∏–Ω–∞ {len(token)})")
        
        if token:
            async with AsyncSessionLocal() as session:
                await add_token(session, callback_query.from_user.id, token)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_info = {
                "user_name": credentials['username'],
                "created_at": int(time.time()),
                "created_via": "saved_credentials",
                "token_metadata": {
                    "username": credentials['username'],
                    "password": credentials['password'],
                    "host": wialon_url
                }
            }
            async with AsyncSessionLocal() as session:
                await update_token_info(session, callback_query.from_user.id, token, token_info)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            url_info = f"\n\nüåê <b>URL:</b>\n<code>{full_url}</code>" if full_url else ""
            
            await status_message.edit_text(
                f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"üîë <code>{token}</code>"
                f"{url_info}",
                parse_mode=ParseMode.HTML
            )
            logger.info(f"[process_saved_creds_connection] –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è user_id={callback_query.from_user.id}")
        else:
            # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –±—ã–ª –∏–∑–≤–ª–µ—á–µ–Ω
            url_display = full_url if isinstance(full_url, str) else str(result)
            logger.warning(f"[process_saved_creds_connection] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω. –û—Ç–≤–µ—Ç: {str(result)[:300]}")
            await status_message.edit_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <code>{url_display}</code>",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"[process_saved_creds_connection] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}", exc_info=True)
        await status_message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}",
            parse_mode=ParseMode.HTML
        )

async def check_token_process(message: types.Message, token: str, use_tor: bool = None, state: FSMContext = None):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Wialon API —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    status_msg = await message.reply("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω...")
    params = {
        "svc": "token/login",
        "params": json.dumps({"token": token, "fl": 1})
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(WIALON_API_URL, params=params) as resp:
                result = await resp.json()
        if "error" in result:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {result.get('error')} {result.get('reason', '')}")
            return
             
        user = result.get("user", {})
        user_info = f"üë§ <b>User:</b> {user.get('nm', 'N/A')} (ID: {user.get('id', 'N/A')})"
        expire_time = result.get("tm")
        expire_str = (
            datetime.datetime.fromtimestamp(expire_time).strftime('%Y-%m-%d %H:%M:%S')
            if expire_time else "N/A"
        )
        await status_msg.edit_text(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω!\n{user_info}\n{expire_str}", parse_mode=ParseMode.HTML)
        # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    except Exception as e:
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}")

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
    logger.info("Starting Telegram bot...")
    await dp.start_polling(bot)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await start_telegram_bot()

if __name__ == '__main__':
    asyncio.run(main())

@dp.message(Command(commands=['my_logins']))
async def my_logins_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from app.database import AsyncSessionLocal
    from app.db_utils import get_user_by_username
    from app.models import User
    user_id = message.from_user.id
    username = None
    async with AsyncSessionLocal() as session:
        # –ù–∞–π—Ç–∏ –≤—Å–µ –ª–æ–≥–∏–Ω—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º telegram id (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑—å)
        result = await session.execute(
            """
            SELECT username FROM users
            """
        )
        usernames = [row[0] for row in result.fetchall()]
    if not usernames:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤.")
        return
    text = "\n".join([f"üë§ <b>{u}</b>" for u in usernames])
    await message.reply(f"–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ:\n\n{text}", parse_mode=ParseMode.HTML)

@dp.message(Command(commands=['delete_login']))
async def delete_login_command(message: types.Message):
    """–£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    args = message.get_args()
    if not args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /delete_login <–ª–æ–≥–∏–Ω>")
        return
    login_to_delete = args.strip()
    from app.database import AsyncSessionLocal
    from app.models import User
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            f"DELETE FROM users WHERE username = :username RETURNING username",
            {"username": login_to_delete}
        )
        deleted = result.rowcount
        await session.commit()
    if deleted:
        await message.reply(f"‚úÖ –õ–æ–≥–∏–Ω <b>{login_to_delete}</b> —É–¥–∞–ª—ë–Ω.", parse_mode=ParseMode.HTML)
    else:
        await message.reply(f"–õ–æ–≥–∏–Ω <b>{login_to_delete}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML)

@dp.message(Command(commands=['token_create_custom']))
async def token_create_custom_command(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∞–≤ –∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    if not is_user_allowed(message.from_user.id):
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    async with AsyncSessionLocal() as session:
        user_tokens = await get_all_user_tokens(session)

    buttons = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    buttons.append([
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é", 
            callback_data="api_create_token_manual"
        )
    ])

    if user_tokens:
        for i, token_data in enumerate(user_tokens[:5]):
            token = token_data["token"]
            user_info = f" ({token_data['user_name']})" if token_data.get('user_name') else ""
            buttons.insert(i, [
                types.InlineKeyboardButton(
                    text=f"üîë –¢–æ–∫–µ–Ω #{i+1}{user_info}", 
                    callback_data=f"api_create_token:{i}"
                )
            ])
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω (–∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–∞–≤–∞):"
    else:
        message_text = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ (–∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–∞–≤–∞):"

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.reply(
        message_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await state.set_state(CustomTokenStates.waiting_for_source_token)

@dp.callback_query(lambda c: c.data == "api_create_token_manual")
async def process_api_create_token_manual(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(CustomTokenStates.waiting_for_source_token)

@dp.message(CustomTokenStates.waiting_for_source_token)
async def process_manual_source_token(message: types.Message, state: FSMContext):
    token = message.text.strip()
    await state.update_data(source_token=token)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (uacl) –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0xFFFFFFFF):", parse_mode=ParseMode.HTML)
    await state.set_state(CustomTokenStates.waiting_for_access_rights)

@dp.message(CustomTokenStates.waiting_for_access_rights)
async def process_access_rights_input(message: types.Message, state: FSMContext):
    uacl = message.text.strip()
    await state.update_data(uacl=uacl)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 86400 –¥–ª—è 1 –¥–Ω—è):")
    await state.set_state(CustomTokenStates.waiting_for_duration)

@dp.message(CustomTokenStates.waiting_for_duration)
async def process_duration_input(message: types.Message, state: FSMContext):
    try:
        duration = int(message.text.strip())
        if duration <= 0:
            raise ValueError
    except Exception:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (—Å–µ–∫—É–Ω–¥—ã):")
        return
    await state.update_data(duration=duration)
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    buttons = [
        [types.InlineKeyboardButton(text="üåê –ù–∞–ø—Ä—è–º—É—é", callback_data="api_token_action:no")],
        [types.InlineKeyboardButton(text="üßÖ –ß–µ—Ä–µ–∑ Tor", callback_data="api_token_action:yes")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await state.set_state(CustomTokenStates.waiting_for_connection_mode)

@dp.callback_query(lambda c: c.data.startswith("api_token_action:"))
async def process_api_token_action(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–∞–≤ –∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    try:
        await callback_query.answer()
        use_tor = callback_query.data.split(":")[1] == "yes"
        
        data = await state.get_data()
        source_token = data.get("source_token")
        uacl = data.get("uacl", "0xFFFFFFFF")  # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        duration = data.get("duration", 0)  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ—Å—Å—Ä–æ—á–Ω–æ)
        
        if not source_token:
            await callback_query.message.edit_text("‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
             
        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç URL –∏ –¥—Ä—É–≥–∏—Ö –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if isinstance(source_token, str):
            if "access_token=" in source_token:
                source_token = source_token.split("access_token=")[1].split("&")[0]
            elif source_token.startswith("{") and "token" in source_token:
                try:
                    token_data = json.loads(source_token)
                    source_token = token_data.get("token", source_token)
                except:
                    pass
        
        status_message = await callback_query.message.edit_text(
            f"üîÑ –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ {'—á–µ—Ä–µ–∑ Tor' if use_tor else '–Ω–∞–ø—Ä—è–º—É—é'}..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º URL API
        wialon_api_url = get_env_variable("WIALON_API_URL", "https://hst-api.wialon.com/wialon/ajax.html")
        
        # 1. –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ token/login
        login_params = {
            "svc": "token/login",
            "params": json.dumps({
                "token": source_token,
                "fl": 7
            })
        }
        
        logger.debug(f"Login params: {login_params}")
        login_result = await make_api_request(wialon_api_url, login_params, use_tor)
        logger.debug(f"Login result: {login_result}")
        
        if "error" in login_result:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_result.get('error')} {login_result.get('reason', '')}")
            return
             
        # –ü–æ–ª—É—á–∞–µ–º eid –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª–æ–≥–∏–Ω–∞
        session_id = login_result.get("eid")
        if not session_id:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–µ—Å—Å–∏–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ token/login
        user_id = login_result.get("user", {}).get("id")
        if not user_id:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            return
        
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID —Å–µ—Å—Å–∏–∏: {session_id}")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ token/update
        params = {
            "callMode": "create",
            "userId": int(user_id),
            "h": "TOKEN",
            "app": "Wialon Hosting Custom Token",
            "at": 0,
            "dur": int(duration),
            "fl": int(uacl, 0),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å hex –≤ —á–∏—Å–ª–æ
            "p": "{}",
            "items": []
        }
        
        create_params = {
            "svc": "token/update",
            "params": json.dumps(params),
            "sid": session_id
        }
        
        logger.debug(f"Create params: {create_params}")
        create_result = await make_api_request(wialon_api_url, create_params, use_tor)
        logger.debug(f"Create result: {create_result}")
        
        if "error" in create_result:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {create_result.get('reason', create_result.get('error'))}")
            return
             
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        new_token = create_result.get("h")
        if not new_token:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω")
            return
             
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
        async with AsyncSessionLocal() as session:
            await add_token(session, callback_query.from_user.id, new_token, parent_token=source_token)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_info = {
            "user_name": login_result.get("au"),
            "expire_time": int(time.time()) + int(duration) if int(duration) > 0 else None,
            "created_at": int(time.time()),
            "created_via": "api_custom",
            "uacl": uacl,
            "duration": duration,
            "token_metadata": {
                "username": login_result.get("au"),
                "password": credentials['password'],
                "host": wialon_url
            }
        }
        async with AsyncSessionLocal() as session:
            await update_token_info(session, callback_query.from_user.id, new_token, token_info)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        expire_info = (
            f"\n‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {datetime.datetime.fromtimestamp(token_info['expire_time']).strftime('%Y-%m-%d %H:%M:%S')}"
            if token_info['expire_time']
            else "\n‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –±–µ—Å—Å—Ä–æ—á–Ω–æ"
        )
        
        await status_message.edit_text(
            f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏!\n\n"
            f"üîë <code>{new_token}</code>\n"
            f"üîí –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {uacl}"
            f"{expire_info}",
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error in API token operation: {e}")
        await callback_query.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@dp.message(Command(commands=["check_db"]))
async def check_db_command(message: types.Message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    await message.reply("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    is_ok = await check_db_connection()
    if is_ok:
        await message.reply("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏.")

@dp.message(Command(commands=['get_token']))
async def get_token_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_token: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Wialon –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    """
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ WialonAccount –∏–∑ –±–∞–∑—ã
        accounts = await session.execute(select(WialonAccount))
        accounts = accounts.scalars().all()
        
        if accounts:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ª–æ–≥–∏–Ω–∞–º–∏
            buttons = []
            for acc in accounts:
                buttons.append([
                    types.InlineKeyboardButton(
                        text=f"üë§ {acc.username}",
                        callback_data=f"use_saved_account:{acc.username}"
                    )
                ])
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            buttons.append([
                types.InlineKeyboardButton(
                    text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    callback_data="input_new_credentials"
                )
            ])
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.reply(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ª–æ–≥–∏–Ω Wialon –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            return
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ–º FSM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è
    await message.reply("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–µ!\n\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Wialon:")
    await state.set_state(GetTokenStates.manual_input_username)

@dp.callback_query(lambda c: c.data.startswith("use_saved_account:"))
async def process_saved_account_choice(callback_query: types.CallbackQuery, state: FSMContext):
    username = callback_query.data.split(":", 1)[1]
    logger.debug(f"[process_saved_account_choice] username={username}")
    async with AsyncSessionLocal() as session:
        account = await session.scalar(select(WialonAccount).where(WialonAccount.username == username))
        if not account:
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ª–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            logger.debug(f"[process_saved_account_choice] account not found for username={username}")
            return
        password = decrypt_password(account.encrypted_password)
        logger.debug(f"[process_saved_account_choice] password={'***' if password else None}")
        # –ò—â–µ–º –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        tokens = await session.execute(select(Token).where(Token.account_id == account.id, Token.token_type == TokenType.MASTER))
        master_tokens = tokens.scalars().all()
        logger.debug(f"[process_saved_account_choice] found master_tokens={master_tokens}")
        if not master_tokens:
            await callback_query.message.edit_text(
                f"‚ùå –î–ª—è –ª–æ–≥–∏–Ω–∞ <b>{username}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω–∞.\n\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ /token_create.",
                parse_mode="HTML"
            )
            logger.debug(f"[process_saved_account_choice] no master tokens for username={username}")
            return
        if len(master_tokens) == 1:
            # –°—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
            token = master_tokens[0].token
            await state.update_data(username=username, password=password, master_token=token)
            await callback_query.message.edit_text(
                f"–ù–∞–π–¥–µ–Ω –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω –¥–ª—è <b>{username}</b>:\n<code>{token}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
                reply_markup=get_connection_choice_keyboard(),
                parse_mode="HTML"
            )
            logger.debug(f"[process_saved_account_choice] auto-selected master_token={token}")
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω–∞
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text=f"üîë {t.token[:8]}...{t.token[-4:]}",
                        callback_data=f"choose_master_token:{t.id}")]
                    for t in master_tokens
                ] + [
                    [types.InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω",
                        callback_data="add_new_master_token"
                    )]
                ]
            )
            await callback_query.message.edit_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω –¥–ª—è <b>{username}</b>:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.update_data(username=username, password=password)
            logger.debug(f"[process_saved_account_choice] presented token choices for username={username}")

@dp.callback_query(lambda c: c.data.startswith("choose_master_token:"))
async def process_choose_master_token(callback_query: types.CallbackQuery, state: FSMContext):
    token_id = int(callback_query.data.split(":", 1)[1])
    data = await state.get_data()
    username = data.get("username")
    password = data.get("password")
    async with AsyncSessionLocal() as session:
        token_obj = await session.get(Token, token_id)
        if not token_obj:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            logger.debug(f"[process_choose_master_token] token_id={token_id} not found")
            return
        token = token_obj.token
        await state.update_data(master_token=token)
        await callback_query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω –¥–ª—è <b>{username}</b>:\n<code>{token}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
            reply_markup=get_connection_choice_keyboard(),
            parse_mode="HTML"
        )
        logger.debug(f"[process_choose_master_token] selected master_token={token} for username={username}")

@dp.callback_query(lambda c: c.data == "add_new_master_token")
async def process_add_new_master_token(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    username = data.get("username")
    password = data.get("password")
    logger.debug(f"[process_add_new_master_token] username={username}")
    if not username or not password:
        await callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω–∞.")
        logger.debug(f"[process_add_new_master_token] missing username or password")
        return
    # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤, —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    keyboard = get_connection_choice_keyboard()
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω–∞:",
        reply_markup=keyboard
    )
    await state.set_state(GetTokenStates.connection_mode_choice)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω–∞
@dp.callback_query(GetTokenStates.connection_mode_choice)
async def process_add_new_master_token_connection_mode(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    data = await state.get_data()
    username = data.get("username")
    password = data.get("password")
    if not username or not password:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        await state.clear()
        return
    use_tor = callback_query.data.split(":")[1] == "yes"
    await state.update_data(use_tor=use_tor)
    status_message = await callback_query.message.edit_text(
        f"üîÑ –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω –¥–ª—è <b>{username}</b> {'—á–µ—Ä–µ–∑ Tor' if use_tor else '–Ω–∞–ø—Ä—è–º—É—é'}...",
        parse_mode=ParseMode.HTML
    )
    try:
        from app.scraper import wialon_login_and_get_url
        wialon_url = "https://hosting.wialon.com/login.html?access_type=-1&duration=0"
        login_result = await wialon_login_and_get_url(username, password, wialon_url, use_tor=use_tor)
        logger.debug(f"[process_add_new_master_token_connection_mode] wialon_login_and_get_url result={login_result}")
        if "error" in login_result or not login_result.get("token") or not isinstance(login_result["token"], str) or len(login_result["token"]) < 20 or "Error" in login_result["token"]:
            error_msg = login_result.get("error") or login_result.get("token") or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω."
            screenshot = login_result.get("screenshot")
            msg = f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Wialon: {error_msg}"
            if screenshot:
                msg += f"\n–°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot}"
            await status_message.edit_text(msg)
            logger.error(f"[process_add_new_master_token_connection_mode] –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: {error_msg}")
            return
        master_token = login_result["token"]
        async with AsyncSessionLocal() as session:
            from app.db_utils import save_master_token
            await save_master_token(
                session,
                token=master_token,
                username=username,
                password=password
            )
        await status_message.edit_text(
            f"‚úÖ –ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è <b>{username}</b>:\n<code>{master_token}</code>",
            parse_mode="HTML"
        )
        logger.debug(f"[process_add_new_master_token_connection_mode] new master_token saved for username={username}")
    except Exception as e:
        logger.exception(f"[process_add_new_master_token_connection_mode] error: {e}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω–∞: {e}")
    finally:
        await state.clear()

@dp.callback_query(lambda c: c.data == "input_new_credentials")
async def process_new_credentials_input(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await callback_query.answer()
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Wialon:")
    await state.set_state(GetTokenStates.manual_input_username)

@dp.message(GetTokenStates.manual_input_username)
async def get_token_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text.strip())
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å Wialon:")
    await state.set_state(GetTokenStates.manual_input_password)

@dp.message(GetTokenStates.manual_input_password)
async def get_token_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    await state.update_data(password=password)
    
    keyboard = get_connection_choice_keyboard()
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(GetTokenStates.connection_mode_choice)

@dp.callback_query(GetTokenStates.connection_mode_choice)
async def get_token_connection_mode(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    username = data.get('username')
    password = data.get('password')
    logger.debug(f"[get_token_connection_mode] username={username}, password={'***' if password else None}")
    
    if not username or not password:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        await state.clear()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Tor
    use_tor = callback_query.data.split(":")[1] == "yes"
    await state.update_data(use_tor=use_tor)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    status_message = await callback_query.message.edit_text(
        f"üîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è <b>{username}</b> {'—á–µ—Ä–µ–∑ Tor' if use_tor else '–Ω–∞–ø—Ä—è–º—É—é'}...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL Wialon –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        wialon_url = get_env_variable("WIALON_BASE_URL")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        result = await wialon_login_and_get_url(
            username, 
            password, 
            wialon_url,
            use_tor=use_tor
        )
        
        if not result or not result.get('token') or not isinstance(result["token"], str) or len(result["token"]) < 20 or "Error" in result["token"]:
            error_msg = result.get("error") or result.get("token") or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω."
            screenshot = result.get("screenshot")
            msg = f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Wialon: {error_msg}"
            if screenshot:
                msg += f"\n–°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot}"
            await status_message.edit_text(msg)
            logger.error(f"[get_token_connection_mode] –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: {error_msg}")
            return
        
        token = result['token']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω (child-—Ç–æ–∫–µ–Ω—ã —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ API!)
        async with AsyncSessionLocal() as session:
            await save_token_chain(
                session,
                username=username,  # –ª–æ–≥–∏–Ω Wialon
                password=password,  # –ø–∞—Ä–æ–ª—å Wialon
                master_token=token,  # —ç—Ç–æ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω!
                creation_method="LOGIN",
                token_metadata={
                    'connection_type': 'tor' if use_tor else 'direct',
                    'user_agent': result.get('user', {}).get('au'),
                    'company': result.get('user', {}).get('crt')
                }
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await status_message.edit_text(
            f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
            f"üîë –¢–æ–∫–µ–Ω: <code>{token}</code>",
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        await status_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            parse_mode=ParseMode.HTML
        )
    finally:
        await state.clear()

async def process_token_duration(message: types.Message, state: FSMContext):
    try:
        duration = int(message.text)
        if duration <= 0:
            await message.reply("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return

        async with state.proxy() as data:
            metadata = data.get('metadata', {})
            metadata['duration'] = duration
            data['metadata'] = metadata

        await state.set_state(TokenStates.waiting_for_uacl)
        await message.reply("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ UACL (–ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞) –¥–ª—è —Ç–æ–∫–µ–Ω–∞:")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")

@dp.callback_query(lambda c: c.data.startswith("check_token:"))
async def check_token_choose(callback_query: types.CallbackQuery, state: FSMContext):
    token_id = int(callback_query.data.split(":", 1)[1])
    use_tor = (await state.get_data()).get("use_tor", True)
    async with AsyncSessionLocal() as session:
        token_obj = await session.get(Token, token_id)
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏
        account = None
        if token_obj.account_id:
            account = await session.get(WialonAccount, token_obj.account_id)
        parent_token = None
        if token_obj.parent_token_id:
            parent_token = await session.get(Token, token_obj.parent_token_id)
    token = token_obj.token
    logger.info(f"[check_token] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: {token[:8]}..., use_tor={use_tor}")
    try:
        wialon_api_url = get_env_variable("WIALON_API_URL", "https://hst-api.wialon.com/wialon/ajax.html")
        params = {
            "svc": "token/login",
            "params": json.dumps({"token": token, "fl": 1})
        }
        logger.info(f"[check_token] params: {params}")
        result = await make_api_request(wialon_api_url, params, use_tor=use_tor)
        logger.info(f"[check_token] result: {result}")
        if "error" in result:
            await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {result.get('error')} {result.get('reason', '')}")
            logger.error(f"[check_token] –û—à–∏–±–∫–∞: {result}")
            return
        user = result.get("user", {})
        expire_time = result.get("tm")
        expire_str = (
            datetime.datetime.fromtimestamp(expire_time).strftime('%Y-%m-%d %H:%M:%S')
            if expire_time else "N/A"
        )
        creation_method = getattr(token_obj, 'creation_method', 'N/A')
        created_at = getattr(token_obj, 'created_at', None)
        created_str = (
            datetime.datetime.fromtimestamp(created_at.timestamp()).strftime('%Y-%m-%d %H:%M:%S')
            if created_at else "N/A"
        )
        fl = result.get("fl", "N/A")
        objects_count = len(result.get("items", [])) if "items" in result else "N/A"
        msg = (
            f"‚úÖ <b>–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω!</b>\n"
            f"üë§ <b>–õ–æ–≥–∏–Ω:</b> {account.username if account else 'N/A'}\n"
            f"üîë <b>–¢–∏–ø:</b> {token_obj.token_type.value}\n"
            f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {created_str}\n"
            f"‚öôÔ∏è <b>–°–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è:</b> {creation_method}\n"
            f"‚è≥ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expire_str}\n"
            f"üîë <b>–ü—Ä–∞–≤–∞ (fl):</b> {fl}\n"
            f"üì¶ <b>–û–±—ä–µ–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:</b> {objects_count}"
        )
        if parent_token:
            msg += f"\nüîó <b>–ú–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω:</b> {parent_token.token[:8]}...{parent_token.token[-4:]}"
        await callback_query.message.edit_text(msg, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"[check_token] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
    await state.clear()

@dp.message(Command(commands=['my_tokens']))
async def my_tokens_command(message: types.Message):
    async with AsyncSessionLocal() as session:
        tokens = await session.execute(select(Token).order_by(Token.created_at.desc()))
        tokens = tokens.scalars().all()
        if not tokens:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
            return
        lines = []
        for t in tokens:
            account = None
            if t.account_id:
                account = await session.get(WialonAccount, t.account_id)
            parent_token = None
            if t.parent_token_id:
                parent_token = await session.get(Token, t.parent_token_id)
            created_str = (
                datetime.datetime.fromtimestamp(t.created_at.timestamp()).strftime('%Y-%m-%d %H:%M:%S')
                if t.created_at else "N/A"
            )
            line = (
                f"üë§ <b>–õ–æ–≥–∏–Ω:</b> {account.username if account else 'N/A'}\n"
                f"üîë <b>–¢–∏–ø:</b> {t.token_type.value}\n"
                f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {created_str}\n"
                f"‚öôÔ∏è <b>–°–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è:</b> {t.creation_method}\n"
                f"<code>{t.token[:8]}...{t.token[-4:]}</code>"
            )
            if parent_token:
                line += f"\nüîó <b>–ú–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω:</b> {parent_token.token[:8]}...{parent_token.token[-4:]}"
            lines.append(line)
        text = "\n\n".join(lines)
        await message.reply(f"–í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã:\n\n{text}", parse_mode=ParseMode.HTML)
