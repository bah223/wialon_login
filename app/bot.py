from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.db_utils import add_token_history, get_user_by_username
from app.wialon_api import check_token, create_token
from app.models import MasterToken
import datetime

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
from app.scraper import wialon_login_and_get_url, make_api_request
from app.utils import logger, get_env_variable, get_bool_env_variable, is_user_allowed
from app.database import AsyncSessionLocal, check_db_connection
from app.db_utils import create_or_update_user, get_all_user_tokens, get_user_by_username
from app.bot_utils import (
    choose_check_mode, get_tor_choice_keyboard, get_manual_token_keyboard, get_confirm_delete_all_keyboard, get_connection_choice_keyboard, get_saved_creds_connection_keyboard,
    handle_check_token_manual, handle_token_input, handle_check_specific_token, handle_check_mode_choice
)
from app.handlers_login import router as login_router
from app.handlers_history import router as history_router
from app.handlers_delete import router as delete_router
from app.states import GetTokenStates  # <--- –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç GetTokenStates
from sqlalchemy import select  # <-- –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç select –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ –ë–î

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=get_env_variable("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ handler –¥–ª—è –ª–æ–≥–∏–Ω–∞ ---
dp.include_router(login_router)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ handler –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π ---
dp.include_router(history_router)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ handler –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ ---
dp.include_router(delete_router)

@dp.message(Command(commands=['start', 'help']))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help."""
    if not is_user_allowed(message.from_user.id):
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    help_text = """
ü§ñ Wialon Token Bot

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/get_token - –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ OAuth (–±—Ä–∞—É–∑–µ—Ä)
/check_token - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Access Token –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    await message.reply(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command(commands=['check_token']))
async def check_token_command(message: types.Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.
    –¢–µ–ø–µ—Ä—å —Ç–æ–∫–µ–Ω—ã –∏—â—É—Ç—Å—è –ø–æ username (–ª–æ–≥–∏–Ω—É Wialon), –∞ –Ω–µ –ø–æ Telegram ID.
    """
    data = await state.get_data()
    username = data.get("username")
    if not username:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –ª–æ–≥–∏–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ get_token
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /get_token, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ username
    async with AsyncSessionLocal() as session:
        from app.db_utils import get_user_by_username
        from app.models import MasterToken
        user = await get_user_by_username(session, username)
        user_tokens = []
        if user:
            master_tokens = await session.execute(select(MasterToken).where(MasterToken.user_id == user.id))
            master_tokens = master_tokens.scalars().all()
            for mt in master_tokens:
                user_tokens.append({
                    "token": mt.token,
                    "user_name": user.username
                })
    keyboard = get_manual_token_keyboard()
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query(lambda c: c.data == "check_token_manual")
async def process_check_token_manual(callback_query: types.CallbackQuery, state: FSMContext):
    await handle_check_token_manual(callback_query, state)

@dp.callback_query(lambda c: c.data.startswith("check_token:"))
async def process_check_specific_token(callback_query: types.CallbackQuery, state: FSMContext):
    await handle_check_specific_token(callback_query, state, choose_check_mode)

@dp.callback_query(lambda c: c.data.startswith("check_tor:"))
async def process_check_mode_choice(callback_query: types.CallbackQuery, state: FSMContext):
    await handle_check_mode_choice(callback_query, state, check_token_process)

@dp.callback_query(lambda c: c.data == "delete_all_tokens")
async def process_delete_all_tokens(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = get_confirm_delete_all_keyboard()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>–í–°–ï</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "confirm_delete_all")
async def process_confirm_delete_all(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    
    async with AsyncSessionLocal() as session:
        await delete_token(session, user_id)
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    await callback_query.message.edit_text(
        "‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "cancel_delete_all")
async def process_cancel_delete_all(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    await callback_query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–∫–µ–Ω–æ–≤
    await token_list_command(callback_query.message)

@dp.callback_query(lambda c: c.data == "use_saved_credentials")
async def process_use_saved_credentials(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    async with AsyncSessionLocal() as session:
        credentials = await get_credentials(session, callback_query.from_user.id)
    if not credentials:
        await callback_query.message.edit_text("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    keyboard = get_saved_creds_connection_keyboard()
    
    await callback_query.message.edit_text(
        f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è <b>{credentials['username']}</b>.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data.startswith("saved_creds_tor:"))
async def process_saved_creds_connection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    await callback_query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Tor
    use_tor = callback_query.data.split(":")[1] == "yes"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    async with AsyncSessionLocal() as session:
        credentials = await get_credentials(session, callback_query.from_user.id)
    if not credentials:
        await callback_query.message.edit_text("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    status_message = await callback_query.message.edit_text(
        f"üîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è <b>{credentials['username']}</b> {'—á–µ—Ä–µ–∑ Tor' if use_tor else '–Ω–∞–ø—Ä—è–º—É—é'}...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        logger.info(f"[process_saved_creds_connection] –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è user_id={callback_query.from_user.id}, username={credentials['username']}, use_tor={use_tor}")
        # –ü–æ–ª—É—á–∞–µ–º URL Wialon –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        try:
            wialon_url = get_env_variable("WIALON_BASE_URL")
        except Exception as e:
            logger.warning(f"[process_saved_creds_connection] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å WIALON_BASE_URL: {e}")
            wialon_url = "https://hosting.wialon.com/login.html?duration=0"
            logger.info(f"[process_saved_creds_connection] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π URL: {wialon_url}")
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        result = await wialon_login_and_get_url(
            credentials['username'], 
            credentials['password'], 
            wialon_url,
            use_tor=use_tor
        )
        logger.info(f"[process_saved_creds_connection] –û—Ç–≤–µ—Ç –æ—Ç wialon_login_and_get_url: {str(result)[:300]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if isinstance(result, dict):
            token = result.get("token", "")
            full_url = result.get("url", "")
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            token = extract_token_from_url(result)
            full_url = result
        logger.info(f"[process_saved_creds_connection] –ò–∑–≤–ª–µ—á—ë–Ω —Ç–æ–∫–µ–Ω: {token[:8]}... (–¥–ª–∏–Ω–∞ {len(token)})")
        
        if token:
            async with AsyncSessionLocal() as session:
                await add_token(session, callback_query.from_user.id, token)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_info = {
                "user_name": credentials['username'],
                "created_at": int(time.time()),
                "created_via": "saved_credentials"
            }
            async with AsyncSessionLocal() as session:
                await update_token_info(session, callback_query.from_user.id, token, token_info)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            url_info = f"\n\nüåê <b>URL:</b>\n<code>{full_url}</code>" if full_url else ""
            
            await status_message.edit_text(
                f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"üîë <code>{token}</code>"
                f"{url_info}",
                parse_mode=ParseMode.HTML
            )
            logger.info(f"[process_saved_creds_connection] –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è user_id={callback_query.from_user.id}")
        else:
            # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –±—ã–ª –∏–∑–≤–ª–µ—á–µ–Ω
            url_display = full_url if isinstance(full_url, str) else str(result)
            logger.warning(f"[process_saved_creds_connection] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω. –û—Ç–≤–µ—Ç: {str(result)[:300]}")
            await status_message.edit_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <code>{url_display}</code>",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"[process_saved_creds_connection] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}", exc_info=True)
        await status_message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}",
            parse_mode=ParseMode.HTML
        )

async def check_token_process(message: types.Message, token: str, use_tor: bool = None, state: FSMContext = None):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Wialon API —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    status_msg = await message.reply("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω...")
    params = {
        "svc": "token/login",
        "params": json.dumps({"token": token, "fl": 1})
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(WIALON_API_URL, params=params) as resp:
                result = await resp.json()
        if "error" in result:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {result.get('error')} {result.get('reason', '')}")
            return
        user = result.get("user", {})
        user_info = f"üë§ <b>User:</b> {user.get('nm', 'N/A')} (ID: {user.get('id', 'N/A')})"
        expire_time = result.get("tm")
        expire_str = f"‚è≥ <b>Expires:</b> {datetime.datetime.fromtimestamp(expire_time).strftime('%Y-%m-%d %H:%M:%S') if expire_time else 'N/A'}"
        await status_msg.edit_text(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω!\n{user_info}\n{expire_str}", parse_mode=ParseMode.HTML)
        # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    except Exception as e:
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}")

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
    logger.info("Starting Telegram bot...")
    await dp.start_polling(bot)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await start_telegram_bot()

if __name__ == '__main__':
    asyncio.run(main())

@dp.message(Command(commands=['my_logins']))
async def my_logins_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from app.database import AsyncSessionLocal
    from app.db_utils import get_user_by_username
    from app.models import User
    user_id = message.from_user.id
    username = None
    async with AsyncSessionLocal() as session:
        # –ù–∞–π—Ç–∏ –≤—Å–µ –ª–æ–≥–∏–Ω—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º telegram id (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑—å)
        result = await session.execute(
            """
            SELECT username FROM users
            """
        )
        usernames = [row[0] for row in result.fetchall()]
    if not usernames:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤.")
        return
    text = "\n".join([f"üë§ <b>{u}</b>" for u in usernames])
    await message.reply(f"–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ:\n\n{text}", parse_mode=ParseMode.HTML)

@dp.message(Command(commands=['delete_login']))
async def delete_login_command(message: types.Message):
    """–£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    args = message.get_args()
    if not args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /delete_login <–ª–æ–≥–∏–Ω>")
        return
    login_to_delete = args.strip()
    from app.database import AsyncSessionLocal
    from app.models import User
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            f"DELETE FROM users WHERE username = :username RETURNING username",
            {"username": login_to_delete}
        )
        deleted = result.rowcount
        await session.commit()
    if deleted:
        await message.reply(f"‚úÖ –õ–æ–≥–∏–Ω <b>{login_to_delete}</b> —É–¥–∞–ª—ë–Ω.", parse_mode=ParseMode.HTML)
    else:
        await message.reply(f"–õ–æ–≥–∏–Ω <b>{login_to_delete}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML)

from aiogram.fsm.state import State, StatesGroup

class CustomTokenStates(StatesGroup):
    waiting_for_access_rights = State()
    waiting_for_duration = State()

@dp.message(Command(commands=['token_create_custom']))
async def token_create_custom_command(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∞–≤ –∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    async with AsyncSessionLocal() as session:
        user_tokens = await get_all_user_tokens(session, message.from_user.id)
    keyboard = get_tor_choice_keyboard()
    keyboard.inline_keyboard.insert(0, [
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é", 
            callback_data="api_create_token_manual"
        )
    ])
    if user_tokens:
        for i, token_data in enumerate(user_tokens[:5]):
            token = token_data["token"]
            user_info = f" ({token_data['user_name']})" if "user_name" in token_data else ""
            keyboard.inline_keyboard.insert(i, [
                types.InlineKeyboardButton(
                    text=f"üîë –¢–æ–∫–µ–Ω #{i+1}{user_info}", 
                    callback_data=f"api_create_token:{i}"
                )
            ])
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω (–∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–∞–≤–∞):"
    else:
        message_text = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ (–∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–∞–≤–∞):"
    await message.reply(
        message_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("api_create_token:"))
async def process_api_create_token_custom(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    index = int(callback_query.data.split(":")[1])
    async with AsyncSessionLocal() as session:
        user_tokens = await get_all_user_tokens(session, callback_query.from_user.id)
    token = user_tokens[index]["token"]
    await state.update_data(source_token=token)
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (uacl) –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0xFFFFFFFF):",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(CustomTokenStates.waiting_for_access_rights)

@dp.message(CustomTokenStates.waiting_for_access_rights)
async def process_access_rights_input(message: types.Message, state: FSMContext):
    uacl = message.text.strip()
    await state.update_data(uacl=uacl)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 86400 –¥–ª—è 1 –¥–Ω—è):")
    await state.set_state(CustomTokenStates.waiting_for_duration)

@dp.message(CustomTokenStates.waiting_for_duration)
async def process_duration_input(message: types.Message, state: FSMContext):
    try:
        duration = int(message.text.strip())
        if duration <= 0:
            raise ValueError
    except Exception:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (—Å–µ–∫—É–Ω–¥—ã):")
        return
    await state.update_data(duration=duration)
    data = await state.get_data()
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (Tor/–Ω–∞–ø—Ä—è–º—É—é)
    token = data.get("source_token")
    await show_api_connection_choice(message, state, token)

@dp.callback_query(lambda c: c.data.startswith("api_token_action:"))
async def process_api_token_action(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–∞–≤ –∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    try:
        await callback_query.answer()
        use_tor = callback_query.data.split(":")[1] == "yes"
        
        data = await state.get_data()
        source_token = data.get("source_token")
        api_operation = data.get("api_operation", "create")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–æ–∑–¥–∞–Ω–∏–µ
        token_to_update = data.get("token_to_update")  # –¢–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ update)
        uacl = data.get("uacl")
        duration = data.get("duration")
        
        if not source_token:
            await callback_query.message.edit_text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
             
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ update
        if api_operation == "update" and not token_to_update:
            await callback_query.message.edit_text("‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç URL –∏ –¥—Ä—É–≥–∏—Ö –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if isinstance(source_token, str):
            if "access_token=" in source_token:
                source_token = source_token.split("access_token=")[1].split("&")[0]
            elif source_token.startswith("{") and "token" in source_token:
                try:
                    token_data = json.loads(source_token)
                    source_token = token_data.get("token", source_token)
                except:
                    pass
        
        # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if api_operation == "update" and isinstance(token_to_update, str):
            if "access_token=" in token_to_update:
                token_to_update = token_to_update.split("access_token=")[1].split("&")[0]
            elif token_to_update.startswith("{") and "token" in token_to_update:
                try:
                    token_data = json.loads(token_to_update)
                    token_to_update = token_data.get("token", token_to_update)
                except:
                    pass
        
        status_message = await callback_query.message.edit_text(
            f"üîÑ {('–°–æ–∑–¥–∞–µ–º' if api_operation=='create' else '–û–±–Ω–æ–≤–ª—è–µ–º')} —Ç–æ–∫–µ–Ω {'—á–µ—Ä–µ–∑ Tor' if use_tor else '–Ω–∞–ø—Ä—è–º—É—é'}..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º URL API
        wialon_api_url = get_env_variable("WIALON_API_URL", "https://hst-api.wialon.com/wialon/ajax.html")
        
        # 1. –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ token/login
        login_params = {
            "svc": "token/login",
            "params": json.dumps({
                "token": source_token,
                "fl": 7
            })
        }
        
        logger.debug(f"Login params: {login_params}")
        login_result = await make_api_request(wialon_api_url, login_params, use_tor)
        logger.debug(f"Login result: {login_result}")
        
        if "error" in login_result:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_result.get('error')} {login_result.get('reason', '')}")
            return
             
        # –ü–æ–ª—É—á–∞–µ–º eid –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª–æ–≥–∏–Ω–∞
        session_id = login_result.get("eid")
        if not session_id:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–µ—Å—Å–∏–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ token/login
        user_id = login_result.get("user", {}).get("id")
        if not user_id:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            return
        
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID —Å–µ—Å—Å–∏–∏: {session_id}")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ token/update
        params = {
            "callMode": api_operation,
            "userId": str(user_id),
            "h": "TOKEN" if api_operation == "create" else token_to_update,
            "app": "Wialon Hosting ‚Äì a platform for GPS monitoring",
            "at": 0,
            "dur": int(duration) if duration else 0,
            "fl": int(uacl, 0) if uacl else 512,
            "p": "{}",
            "items": []
        }
        
        create_params = {
            "svc": "token/update",
            "params": json.dumps(params),
            "sid": session_id
        }
        
        logger.debug(f"Create params: {create_params}")
        create_result = await make_api_request(wialon_api_url, create_params, use_tor)
        logger.debug(f"Create result: {create_result}")
        
        if "error" in create_result:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ {('—Å–æ–∑–¥–∞–Ω–∏—è' if api_operation=='create' else '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')} —Ç–æ–∫–µ–Ω–∞: {create_result.get('reason', create_result.get('error'))}")
            return
             
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        new_token = create_result.get("h")
        if not new_token:
            await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å {('—Å–æ–∑–¥–∞—Ç—å' if api_operation=='create' else '–æ–±–Ω–æ–≤–∏—Ç—å')} —Ç–æ–∫–µ–Ω")
            return
             
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
        # –ú–µ—Ç–æ–¥ add_token –≤ TokenStorage —è–≤–ª—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
        if api_operation == "create":
            # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π
            async with AsyncSessionLocal() as session:
                await add_token(session, callback_query.from_user.id, new_token, parent_token=source_token)
        else:
            # –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö
            async with AsyncSessionLocal() as session:
                await add_token(session, callback_query.from_user.id, new_token, parent_token=token_to_update)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_info = {
            "user_name": login_result.get("au"),
            "expire_time": login_result.get("tm"),
            "created_at": int(time.time()),
            "created_via": "api",
            "token_type": api_operation,
            "uacl": uacl,
            "duration": duration
        }
        async with AsyncSessionLocal() as session:
            await update_token_info(session, callback_query.from_user.id, new_token, token_info)
        
        await status_message.edit_text(
            f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ {('—Å–æ–∑–¥–∞–Ω' if api_operation=='create' else '–æ–±–Ω–æ–≤–ª–µ–Ω')} —á–µ—Ä–µ–∑ API!\n\n"
            f"üîë <code>{new_token}</code>",
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error in API token operation: {e}")
        await callback_query.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command(commands=["check_db"]))
async def check_db_command(message: types.Message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    await message.reply("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    is_ok = await check_db_connection()
    if is_ok:
        await message.reply("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏.")

@dp.message(Command(commands=['get_token']))
async def get_token_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_token: –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω ‚Äî –≤–µ—Ä–Ω—É—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å FSM-—Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è/—Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
    """
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ username, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω
        data = await state.get_data()
        username = data.get("username")
        user_tokens = []
        if username:
            from app.db_utils import get_user_by_username
            user = await get_user_by_username(session, username)
            if user:
                master_tokens = await session.execute(select(MasterToken).where(MasterToken.user_id == user.id))
                master_tokens = master_tokens.scalars().all()
                for mt in master_tokens:
                    user_tokens.append({
                        "token": mt.token,
                        "user_name": user.username
                    })
        if user_tokens:
            reply = "\n".join([
                f"üîë <b>{t['user_name']}</b>: <code>{t['token'][:8]}...{t['token'][-4:]}</code>" for t in user_tokens
            ])
            await message.reply(f"–ù–∞–π–¥–µ–Ω—ã –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã:\n{reply}", parse_mode=ParseMode.HTML)
            return
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å FSM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è
    await message.reply("\u274C –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π!\n\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Wialon:")
    await state.set_state(GetTokenStates.manual_input_username)

@dp.message(GetTokenStates.manual_input_username)
async def get_token_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text.strip())
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å Wialon:")
    await state.set_state(GetTokenStates.manual_input_password)

@dp.message(GetTokenStates.manual_input_password)
async def get_token_password(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text.strip())
    keyboard = get_connection_choice_keyboard()
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(GetTokenStates.connection_mode_choice)

@dp.callback_query(GetTokenStates.connection_mode_choice)
async def get_token_connection_mode(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    use_tor = callback_query.data.split(":")[1] == "yes"
    data = await state.get_data()
    username = data.get("username")
    password = data.get("password")
    wialon_url = get_env_variable("WIALON_BASE_URL")
    result = await wialon_login_and_get_url(username, password, wialon_url, use_tor=use_tor)
    token = result.get("token")
    if token:
        # --- –°–û–•–†–ê–ù–Ø–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–∞—Å—Ç–µ—Ä-—Ç–æ–∫–µ–Ω –ø–æ username ---
        from app.db_utils import create_or_update_user
        from app.models import MasterToken
        from app.database import AsyncSessionLocal
        import datetime
        async with AsyncSessionLocal() as session:
            user = await create_or_update_user(session, username, password)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = await session.execute(select(MasterToken).where(MasterToken.user_id == user.id, MasterToken.token == token))
            if not existing.scalars().first():
                mt = MasterToken(
                    user_id=user.id,
                    token=token,
                    created_at=datetime.datetime.utcnow(),
                    creation_method="OAuth"
                )
                session.add(mt)
                await session.commit()
        await callback_query.message.edit_text(f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!\n<code>{token}</code>", parse_mode=ParseMode.HTML)
    else:
        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. {result.get('error', '')}")
    await state.clear()
