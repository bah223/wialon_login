import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
from app.scraper import wialon_login_and_get_url, make_api_request
from app.utils import logger, get_env_variable, get_bool_env_variable
from app.storage import token_storage
from app.states import GetTokenStates
import time
import re
import json
import urllib.parse
import socket
import os
import datetime
import csv
import io

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=get_env_variable("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command(commands=['start', 'help']))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help."""
    help_text = """
ü§ñ Wialon Token Bot

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/get_token - –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ OAuth (–±—Ä–∞—É–∑–µ—Ä)
/check_token - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Access Token –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
/token_create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
/token_update - –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
/token_list - –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    await message.reply(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command(commands=['get_token']))
async def get_token_command(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å Access Token —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    credentials = token_storage.get_credentials(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üîí –ß–µ—Ä–µ–∑ Tor", callback_data="use_tor:yes"),
                types.InlineKeyboardButton(text="üöÄ –ù–∞–ø—Ä—è–º—É—é", callback_data="use_tor:no")
            ]
        ]
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if credentials:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        saved_date = datetime.datetime.fromtimestamp(credentials["saved_at"]).strftime('%Y-%m-%d %H:%M')
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
        keyboard.inline_keyboard.insert(0, [
            types.InlineKeyboardButton(
                text=f"üîë –í–æ–π—Ç–∏ –∫–∞–∫ {credentials['username']} (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_date})",
                callback_data="use_saved_credentials"
            )
        ])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                callback_data="delete_saved_credentials"
            )
        ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wialon:"
    if credentials:
        message_text = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
    
    await message.reply(message_text, reply_markup=keyboard)
    await state.set_state(GetTokenStates.connection_mode_choice)

@dp.message(Command(commands=['check_token']))
async def check_token_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞."""
    user_tokens = token_storage.get_user_tokens(message.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    
    if user_tokens:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
        for i, token_data in enumerate(user_tokens[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω–∞
            token = token_data["token"]
            # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ, –Ω–µ –≤–ª–∏—è—è –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            token_preview = f"{token[:10]}...{token[-10:]}" if len(token) > 25 else token
            
            keyboard.inline_keyboard.append([
                types.InlineKeyboardButton(
                    text=f"–¢–æ–∫–µ–Ω #{i+1}: {token_preview}",
                    callback_data=f"check_token:{token}"
                )
            ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é", 
            callback_data="check_token_manual"
        )
    ])
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.message(Command(commands=['token_list']))
async def token_list_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    user_tokens = token_storage.get_user_tokens(message.from_user.id)
    
    if not user_tokens:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–∫–µ–Ω–æ–≤
    response = f"üîë <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã ({len(user_tokens)}):</b>\n\n"
    
    for i, token_data in enumerate(user_tokens):
        token = token_data["token"]
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        token_info = f"<b>#{i+1}</b>: <code>{token}</code>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if "user_name" in token_data:
            token_info += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {token_data['user_name']}\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è
        if "created_at" in token_data:
            created_time = datetime.datetime.fromtimestamp(token_data["created_at"]).strftime('%Y-%m-%d %H:%M:%S')
            token_info += f"‚è± <b>–ü–æ–ª—É—á–µ–Ω:</b> {created_time}\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        if "created_via" in token_data:
            via_method = "API" if token_data["created_via"] == "api" else "–ë—Ä–∞—É–∑–µ—Ä"
            token_info += f"üîß <b>–°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑:</b> {via_method}\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ API (create/update)
        if "token_type" in token_data:
            operation_type = "–°–æ–∑–¥–∞–Ω" if token_data["token_type"] == "create" else "–û–±–Ω–æ–≤–ª–µ–Ω"
            token_info += f"üìù <b>–û–ø–µ—Ä–∞—Ü–∏—è:</b> {operation_type}\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ç–æ–∫–µ–Ω–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if "parent_token" in token_data:
            parent_token = token_data['parent_token']
            if parent_token:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ parent_token –Ω–µ None
                parent_preview = f"{parent_token[:10]}...{parent_token[-10:]}" if len(parent_token) > 25 else parent_token
                token_info += f"üîÑ <b>–ù–∞ –æ—Å–Ω–æ–≤–µ:</b> <code>{parent_preview}</code>\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if "expire_time" in token_data and token_data["expire_time"]:
            expire_time = int(token_data["expire_time"])
            expire_str = datetime.datetime.fromtimestamp(expire_time).strftime('%Y-%m-%d %H:%M:%S')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
            if expire_time < time.time():
                token_info += f"‚ö†Ô∏è <b>–ò–°–¢–ï–ö:</b> {expire_str}\n"
            else:
                # –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
                days_left = (expire_time - time.time()) / 86400
                token_info += f"üìÖ <b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</b> {expire_str} ({int(days_left)} –¥–Ω.)\n"
                
        response += f"{token_info}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV", 
                    callback_data="export_tokens_csv"
                )
            ]
        ]
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
    await message.reply(response, parse_mode=ParseMode.HTML, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "export_tokens_csv")
async def export_tokens_csv_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ CSV —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."""
    await callback_query.answer()
    
    user_tokens = token_storage.get_user_tokens(callback_query.from_user.id)
    
    if not user_tokens:
        await callback_query.message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
    output = io.StringIO()
    csv_writer = csv.writer(output)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["Token", "User", "Created At", "Expires At", "Created Via", 
               "Operation Type", "Parent Token", "Days Left", "Status"]
    csv_writer.writerow(headers)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö
    for token_data in user_tokens:
        token = token_data["token"]
        user_name = token_data.get("user_name", "")
        created_at = datetime.datetime.fromtimestamp(token_data.get("created_at", 0)).strftime('%Y-%m-%d %H:%M:%S') if "created_at" in token_data else ""
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        expires_at = ""
        days_left = ""
        status = "Active"
        if "expire_time" in token_data and token_data["expire_time"]:
            expire_time = int(token_data["expire_time"])
            expires_at = datetime.datetime.fromtimestamp(expire_time).strftime('%Y-%m-%d %H:%M:%S')
            
            if expire_time < time.time():
                status = "Expired"
                days_left = "0"
            else:
                days_left = str(int((expire_time - time.time()) / 86400))
        
        created_via = token_data.get("created_via", "")
        operation_type = token_data.get("token_type", "")
        parent_token = token_data.get("parent_token", "")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ CSV
        csv_writer.writerow([
            token, user_name, created_at, expires_at, created_via, 
            operation_type, parent_token, days_left, status
        ])
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    output.seek(0)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    current_time = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"wialon_tokens_{current_time}.csv"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.reply_document(
        types.BufferedInputFile(
            output.getvalue().encode('utf-8'),
            filename=filename
        ),
        caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(user_tokens)} —Ç–æ–∫–µ–Ω–æ–≤"
    )
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º StringIO
    output.close()

@dp.callback_query(lambda c: c.data == "check_token_manual")
async def process_check_token_manual(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞."""
    try:
        await callback_query.answer()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
    
    try:
        await callback_query.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
            "<i>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</i>\n"
            "<code>/check_token YOUR_TOKEN</code>",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
        await callback_query.message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
            "<i>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</i>\n"
            "<code>/check_token YOUR_TOKEN</code>",
            parse_mode=ParseMode.HTML
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
    await state.set_state(GetTokenStates.waiting_for_token_input)

@dp.callback_query(lambda c: c.data == "check_last_token")
async def process_check_last_token(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    try:
        await callback_query.answer()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tokens = token_storage.get_user_tokens(callback_query.from_user.id)
    
    if not user_tokens:
        await callback_query.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /get_token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(token=user_tokens[0]["token"])
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await choose_check_mode(callback_query.message, state)

@dp.message(GetTokenStates.waiting_for_token_input)
async def process_token_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é."""
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    token = message.text.strip()
    
    if not token:
        await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(token=token)
    logger.info(f"Token manually entered: {token[:10]}...")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await choose_check_mode(message, state)

@dp.message(GetTokenStates.manual_input_username)
async def process_manual_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.update_data(username=message.text)
    await state.set_state(GetTokenStates.manual_input_password)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å Wialon:")

def extract_token_from_url(url):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏–∑ URL.
    
    Args:
        url: URL, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
    Returns:
        str: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ url —Å—Ç—Ä–æ–∫–æ–π
    if not isinstance(url, str):
        logger.warning(f"URL is not a string: {type(url)}")
        return ""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL
    token = ""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –≤ URL –ø–æ—Å–ª–µ access_token=
    if "access_token=" in url:
        token = url.split("access_token=")[1].split("&")[0]
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –≤ URL –∫–∞–∫ —á–∞—Å—Ç—å –ø—É—Ç–∏
    elif "/access_token/" in url:
        token = url.split("/access_token/")[1].split("/")[0]
    
    logger.debug(f"Extracted token from URL: {token[:10]}...")
    return token

@dp.message(GetTokenStates.manual_input_password)
async def process_manual_password_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    await state.update_data(password=message.text)
    await get_token_process(message, state)

async def get_token_process(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å."""
    try:
        logger.info("Starting token retrieval process...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        username = data.get("username")
        password = data.get("password")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Tor –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        use_tor = data.get("use_tor", get_bool_env_variable("USE_TOR", False))
        
        try:
            # –ï—Å–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not username:
                username = get_env_variable("WIALON_USERNAME")
            if not password:
                password = get_env_variable("WIALON_PASSWORD")
            
            # –ü–æ–ª—É—á–∞–µ–º URL Wialon
            try:
                wialon_url = get_env_variable("WIALON_BASE_URL")
            except:
                wialon_url = "https://hosting.wialon.com/login.html?duration=0"
                logger.warning(f"WIALON_BASE_URL not found, using default: {wialon_url}")
        except Exception as e:
            logger.error(f"Error getting credentials: {e}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        status_message = await message.reply(
            f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ Wialon{' —á–µ—Ä–µ–∑ Tor' if use_tor else ' –Ω–∞–ø—Ä—è–º—É—é'}..."
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        try:
            result = await wialon_login_and_get_url(username, password, wialon_url, use_tor=use_tor)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
            if isinstance(result, dict):
                token = result.get("token", "")
                full_url = result.get("url", "")
                screenshot = result.get("screenshot")
            else:
                # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                token = result
                full_url = result
                screenshot = None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"Token type: {type(token)}, value: {token[:70]}")
            
            # –í—Å–µ–≥–¥–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º URL
            url_info = f"\n\nüåê <b>URL:</b>\n<code>{full_url}</code>"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
            if token.startswith("Error:"):
                error_message = f"‚ùå {token}{url_info}"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                if screenshot and os.path.exists(screenshot):
                    await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∫—Ä–∏–Ω—à–æ—Ç...", parse_mode=ParseMode.HTML)
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
                        photo = FSInputFile(screenshot)
                        await message.answer_photo(
                            photo, 
                            caption=error_message,
                            parse_mode=ParseMode.HTML
                        )
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                        try:
                            os.remove(screenshot)
                        except:
                            pass
                    except Exception as photo_error:
                        logger.error(f"Error sending photo: {photo_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        await status_message.edit_text(error_message, parse_mode=ParseMode.HTML)
                else:
                    await status_message.edit_text(error_message, parse_mode=ParseMode.HTML)
                
                await state.clear()
                return
            
            # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            user_id = message.from_user.id
            logger.debug(f"User ID type: {type(user_id)}, value: {user_id}")
            # –ú–µ—Ç–æ–¥ add_token –≤ –∫–ª–∞—Å—Å–µ TokenStorage —è–≤–ª—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
            token_storage.add_token(user_id=user_id, token=token)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_info = {
                "user_name": username,
                "created_at": int(time.time()),
                "created_via": "browser"
            }
            token_storage.update_token_info(user_id, token, token_info)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–∫–µ–Ω –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞
            token_str = str(token)
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
            token_display = token_str
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            save_credentials_keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="–î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_credentials:{username}:{password}"),
                        types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="not_save_credentials")
                    ]
                ]
            )
            
            await status_message.edit_text(
                f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"üîë <code>{token_display}</code>\n\n"
                f"{url_info}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_token —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ.\n\n"
                f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –±—É–¥—É—â–µ–º?",
                reply_markup=save_credentials_keyboard,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Error in get_token_process: {e}")
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å URL, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            url_info = ""
            if 'full_url' in locals():
                url_info = f"\n\nüåê <b>URL:</b>\n<code>{full_url}</code>"
            
            error_message = f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {str(e)}{url_info}"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
            if 'screenshot' in locals() and screenshot and os.path.exists(screenshot):
                try:
                    await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∫—Ä–∏–Ω—à–æ—Ç...", parse_mode=ParseMode.HTML)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
                    photo = FSInputFile(screenshot)
                    await message.answer_photo(
                        photo, 
                        caption=error_message,
                        parse_mode=ParseMode.HTML
                    )
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                    try:
                        os.remove(screenshot)
                    except:
                        pass
                except Exception as photo_error:
                    logger.error(f"Error sending photo: {photo_error}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await status_message.edit_text(error_message, parse_mode=ParseMode.HTML)
            else:
                await status_message.edit_text(error_message, parse_mode=ParseMode.HTML)
        finally:
            await state.clear()
            logger.info("State cleared")
    except Exception as e:
        logger.error(f"Error in get_token_process: {e}")
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        await state.clear()

@dp.message(Command(commands=['delete_token']))
async def delete_token_command(message: types.Message):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω."""
    user_tokens = token_storage.get_user_tokens(message.from_user.id)
    
    if not user_tokens:
        await message.reply(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /get_token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    for token_data in user_tokens:
        token = token_data["token"]
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        token_label = f"{token[:8]}... - "
        if "user_name" in token_data:
            token_label += token_data["user_name"]
        else:
            created_time = int(token_data.get('created_at', 0))
            import datetime
            time_str = datetime.datetime.fromtimestamp(created_time).strftime('%Y-%m-%d %H:%M')
            token_label += f"–ü–æ–ª—É—á–µ–Ω: {time_str}"
            
        keyboard.add(types.InlineKeyboardButton(
            text=f"üóëÔ∏è {token_label}",
            callback_data=f"delete_token:{token[:15]}"  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Ç–æ–∫–µ–Ω–∞
        ))
    
    await message.reply(
        "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data.startswith("delete_token:"))
async def delete_token_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    try:
        await bot.answer_callback_query(callback_query.id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
    
    token_start = callback_query.data.split(":", 1)[1]
    status_message = await callback_query.message.reply("üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tokens = token_storage.get_user_tokens(callback_query.from_user.id)
        
        if not user_tokens:
            await status_message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
            return
        
        found_token = None
        for token_data in user_tokens:
            token = token_data["token"]
            if token.startswith(token_start):
                found_token = token
                break
        
        if not found_token:
            await status_message.edit_text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
        import aiohttp
        import json
        
        try:
            wialon_api_url = get_env_variable("WIALON_API_URL")
        except:
            wialon_api_url = "https://hst-api.wialon.com/wialon/ajax.html"
            logger.warning(f"WIALON_API_URL not found, using default: {wialon_api_url}")
        
        async with aiohttp.ClientSession() as session:
            # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–º
            login_params = {
                "svc": "token/login",
                "params": json.dumps({
                    "token": found_token
                })
            }
            
            async with session.get(wialon_api_url, params=login_params) as response:
                result = await response.json()
                
                if "error" in result:
                    await status_message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {result.get('error')}"
                    )
                    return
                
                session_id = result.get("eid")
                token_str = result.get("user", {}).get("token", "")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º h (–∏–º—è —Ç–æ–∫–µ–Ω–∞) –∏–∑ —Ç–æ–∫–µ–Ω–∞ - –ø–µ—Ä–≤—ã–µ 72 —Å–∏–º–≤–æ–ª–∞
                token_h = found_token[:72]
                
                # –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ token/update
                delete_params = {
                    "svc": "token/update",
                    "params": json.dumps({
                        "callMode": "delete",
                        "userId": user_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ h
                    }),
                    "sid": session_id
                }
                
                async with session.get(wialon_api_url, params=delete_params) as delete_response:
                    delete_result = await delete_response.json()
                    
                    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API, —É–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                    token_storage.delete_token(found_token)
                    
                    await status_message.edit_text("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–µ
            try:
                await callback_query.message.edit_text(
                    callback_query.message.text + "\n\n<b>üóëÔ∏è –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω!</b>",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.warning(f"Could not update original message: {e}")
    except Exception as e:
        logger.error(f"Error deleting token: {e}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")

@dp.callback_query(lambda c: c.data.startswith("check_token:"))
async def process_check_specific_token(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ callback_data
    token_prefix = callback_query.data.split(":")[1]
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
    user_tokens = token_storage.get_user_tokens(callback_query.from_user.id)
    full_token = None
    
    for token_data in user_tokens:
        if token_data["token"].startswith(token_prefix):
            full_token = token_data["token"]
            break
    
    if not full_token:
        await callback_query.message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(token=full_token)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await choose_check_mode(callback_query.message, state)

@dp.message(Command(commands=['list_all_tokens']))
async def list_all_tokens_command(message: types.Message):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–±–æ—Ç–µ, –Ω–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    user_tokens = token_storage.get_user_tokens(message.from_user.id)
    
    if not user_tokens:
        await message.reply(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /get_token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω
    latest_token = user_tokens[0]["token"]
    
    status_message = await message.reply("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤...")
    
    try:
        import aiohttp
        import json
        
        # –ü–æ–ª—É—á–∞–µ–º URL API
        try:
            wialon_api_url = get_env_variable("WIALON_API_URL")
        except:
            wialon_api_url = "https://hst-api.wialon.com/wialon/ajax.html"
            logger.warning(f"WIALON_API_URL not found, using default: {wialon_api_url}")
        
        async with aiohttp.ClientSession() as session:
            # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–º
            login_params = {
                "svc": "token/login",
                "params": json.dumps({
                    "token": latest_token
                })
            }
            
            async with session.get(wialon_api_url, params=login_params) as response:
                login_result = await response.json()
                
                if "error" in login_result:
                    await status_message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_result.get('error')}"
                    )
                    return
                
                session_id = login_result.get("eid")
                logger.info(f"Successfully logged in, session ID: {session_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
                if "user" in login_result and "token" in login_result["user"]:
                    token_str = login_result["user"]["token"]
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å URL-encoded —Å–∏–º–≤–æ–ª—ã
                    try:
                        decoded_token = urllib.parse.unquote(token_str)
                        logger.debug(f"URL-decoded token: {decoded_token}")
                        token_str = decoded_token
                    except Exception as e:
                        logger.warning(f"Error decoding URL-encoded token: {e}")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    user_name = login_result.get("user", {}).get("nm", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    tokens_text = (
                        f"üîë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ:</b>\n\n"
                        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\n"
                        f"üëë <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {login_result['user'].get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"üîë <b>EID:</b> {login_result.get('eid', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"üåê <b>Host:</b> {login_result.get('host', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                        f"‚ÑπÔ∏è <i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Ç–æ–∫–µ–Ω–æ–≤. "
                        f"–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ.</i>\n\n"
                        f"üìã <b>–¢–æ–∫–µ–Ω:</b>\n<code>{token_str}</code>\n"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º dur (–≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è)
                        dur_match = re.search(r'"dur"\s*:\s*(\d+)', token_str)
                        if dur_match:
                            dur_value = int(dur_match.group(1))
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º app (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
                            app_match = re.search(r'"app"\s*:\s*"([^"]+)"', token_str)
                            app_name = app_match.group(1) if app_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            tokens_text += f"\nüîå <b>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b> {app_name}"
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º at (–≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏) –∏–ª–∏ ct (–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è)
                            at_match = re.search(r'"at"\s*:\s*(\d+)', token_str)
                            if not at_match:
                                at_match = re.search(r'"ct"\s*:\s*(\d+)', token_str)
                            
                            at_value = int(at_match.group(1)) if at_match else int(time.time())
                            at_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(at_value))
                            tokens_text += f"\n‚è±Ô∏è <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:</b> {at_str}"
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è
                            if dur_value == 0:
                                # –¢–æ–∫–µ–Ω "–±–µ—Å—Å—Ä–æ—á–Ω—ã–π"
                                tokens_text += f"\n‚åõÔ∏è <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:</b> <i>100 –¥–Ω–µ–π (—É—Å–ª–æ–≤–Ω–æ –±–µ—Å—Å—Ä–æ—á–Ω—ã–π)</i>"
                                # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ª–æ–≤–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (100 –¥–Ω–µ–π)
                                approx_end_time = at_value + 8640000  # 100 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                                end_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(approx_end_time))
                                tokens_text += f"\nüìÖ <b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</b> {end_str} (–ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏)"
                            else:
                                # –¢–æ–∫–µ–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º
                                days = dur_value // 86400
                                hours = (dur_value % 86400) // 3600
                                minutes = (dur_value % 3600) // 60
                                
                                dur_str = f"{days} –¥–Ω."
                                if hours > 0:
                                    dur_str += f" {hours} —á."
                                elif hours > 0:
                                    dur_str = f"{hours} —á. {minutes} –º–∏–Ω."
                                else:
                                    dur_str = f"{minutes} –º–∏–Ω."
                                
                                tokens_text += f"\n‚åõÔ∏è <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:</b> {dur_str}"
                                tokens_text += f"\nüìÖ <b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</b> {end_str}"
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
                                end_time = at_value + dur_value
                                if end_time < time.time():
                                    tokens_text += f"\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫!</b>"
                                else:
                                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                                    remaining = end_time - int(time.time())
                                    if remaining > 0 and remaining < 259200:  # 3 –¥–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                                        rem_days = remaining // 86400
                                        rem_hours = (remaining % 86400) // 3600
                                        tokens_text += f"\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {rem_days} –¥–Ω. {rem_hours} —á.!"
                    except Exception as e:
                        logger.error(f"Error extracting token duration: {e}")
                        tokens_text += "\n‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞</i>"
                else:
                    tokens_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ."
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
                keyboard = None

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–µ
                await status_message.edit_text(tokens_text, parse_mode=ParseMode.HTML)
                
    except Exception as e:
        logger.error(f"Error listing tokens: {e}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")

@dp.callback_query(lambda c: c.data.startswith("logout_session:"))
async def logout_session_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        await bot.answer_callback_query(callback_query.id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
    
    session_id = callback_query.data.split(":", 1)[1]
    status_message = await callback_query.message.reply("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏...")
    
    try:
        import aiohttp
        import json
        
        # –ü–æ–ª—É—á–∞–µ–º URL API
        try:
            wialon_api_url = get_env_variable("WIALON_API_URL")
        except:
            wialon_api_url = "https://hst-api.wialon.com/wialon/ajax.html"
            logger.warning(f"WIALON_API_URL not found, using default: {wialon_api_url}")
        
        async with aiohttp.ClientSession() as session:
            logout_params = {
                "svc": "core/logout",
                "params": json.dumps({}),
                "sid": session_id
            }
            
            async with session.get(wialon_api_url, params=logout_params) as logout_response:
                logout_result = await logout_response.json()
                
                if "error" in logout_result:
                    await status_message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {logout_result.get('error')}"
                    )
                else:
                    await status_message.edit_text("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–µ
                    try:
                        await callback_query.message.edit_text(
                            callback_query.message.text + "\n\n<b>üîí –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞!</b>",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.warning(f"Could not update original message: {e}")
    except Exception as e:
        logger.error(f"Error during session logout: {e}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")

@dp.callback_query(lambda c: c.data == "list_all_tokens")
async def list_all_tokens_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤."""
    try:
        await bot.answer_callback_query(callback_query.id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    await list_all_tokens_command(callback_query.message)

@dp.callback_query(lambda c: c.data.startswith("extend_token:"))
async def extend_token_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞."""
    try:
        await bot.answer_callback_query(callback_query.id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
    
    token_start = callback_query.data.split(":", 1)[1]
    status_message = await callback_query.message.reply("üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tokens = token_storage.get_user_tokens(callback_query.from_user.id)
        
        if not user_tokens:
            await status_message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
            return
        
        found_token = None
        for token_data in user_tokens:
            token = token_data["token"]
            if token.startswith(token_start):
                found_token = token
                break
        
        if not found_token:
            await status_message.edit_text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ token/update API
        import aiohttp
        import json
        
        try:
            wialon_api_url = get_env_variable("WIALON_API_URL")
        except:
            wialon_api_url = "https://hst-api.wialon.com/wialon/ajax.html"
            logger.warning(f"WIALON_API_URL not found, using default: {wialon_api_url}")
        
        async with aiohttp.ClientSession() as session:
            # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–º
            login_params = {
                "svc": "token/login",
                "params": json.dumps({
                    "token": found_token
                })
            }
            
            async with session.get(wialon_api_url, params=login_params) as response:
                result = await response.json()
                
                if "error" in result:
                    await status_message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {result.get('error')}"
                    )
                    return
                
                session_id = result.get("eid")
                token_str = result.get("user", {}).get("token", "")
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded —Å—Ç—Ä–æ–∫—É —Ç–æ–∫–µ–Ω–∞
                try:
                    decoded_token = urllib.parse.unquote(token_str)
                    token_str = decoded_token
                except Exception as e:
                    logger.warning(f"Error decoding URL-encoded token: {e}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º h (–∏–º—è —Ç–æ–∫–µ–Ω–∞) –∏–∑ —Ç–æ–∫–µ–Ω–∞ - –ø–µ—Ä–≤—ã–µ 72 —Å–∏–º–≤–æ–ª–∞
                token_h = found_token[:72]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                app_match = re.search(r'"app"\s*:\s*"([^"]+)"', token_str)
                app_name = app_match.group(1) if app_match else "Wialon Hosting"
                
                # –®–∞–≥ 2: –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é token/update API
                update_params = {
                    "svc": "token/update",
                    "params": json.dumps({
                        "callMode": "update",
                        "userId": user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        "dur": 8640000,  # 100 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                        "app": app_name,
                        "at": 0,  # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
                        "fl": 8192,  # –ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø
                        "p": "{}"
                    }),
                    "sid": session_id
                }
                
                async with session.get(wialon_api_url, params=update_params) as update_response:
                    update_result = await update_response.json()
                    
                    if "error" in update_result:
                        await status_message.edit_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {update_result.get('error')}"
                        )
                        return
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
                    dur_value = update_result.get("dur", 0)
                    at_value = update_result.get("at", int(time.time()))
                    end_time = at_value + dur_value
                    end_time_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(end_time))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    token_storage.update_token_data(found_token, {
                        "duration": dur_value,
                        "is_permanent": dur_value == 0,
                        "expire_time": end_time if dur_value > 0 else at_value + 8640000,
                        "created_time": at_value,
                        "token_name": app_name,
                        "last_checked": int(time.time())
                    })
                    
                    await status_message.edit_text(
                        f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω!\n\n"
                        f"‚åõ <b>–ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 100 –¥–Ω–µ–π\n"
                        f"üìÖ <b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</b> {end_time_str}\n",
                        parse_mode="HTML"
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await check_token_command(callback_query.message, found_token)
                    except Exception as e:
                        logger.error(f"Error refreshing token info: {e}")
    except Exception as e:
        logger.error(f"Error extending token: {e}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")

@dp.callback_query(lambda c: c.data.startswith("use_tor:"))
async def process_connection_mode(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ Tor –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é)."""
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    use_tor = callback_query.data.split(":")[1] == "yes"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(use_tor=use_tor)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    mode_text = "üîí –ß–µ—Ä–µ–∑ Tor" if use_tor else "üöÄ –ù–∞–ø—Ä—è–º—É—é"
    await callback_query.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {mode_text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è Wialon:"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ª–æ–≥–∏–Ω–∞
    await state.set_state(GetTokenStates.manual_input_username)

@dp.callback_query(lambda c: c.data.startswith("check_tor:"))
async def process_check_token_mode(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞."""
    try:
        await callback_query.answer()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    use_tor = callback_query.data.split(":")[1] == "yes"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    token = data.get("token", "")
    
    if not token:
        await callback_query.message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    await check_token_process(callback_query.message, token, use_tor, state)

async def check_token_process(message: types.Message, token: str, use_tor: bool = None, state: FSMContext = None):
    """–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞."""
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ —è–≤–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Tor –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    if use_tor is None:
        use_tor = get_bool_env_variable("USE_TOR", False)
    
    status_message = await message.reply(
        f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞{' —á–µ—Ä–µ–∑ Tor' if use_tor else ' –Ω–∞–ø—Ä—è–º—É—é'}..."
    )
    
    try:
        import json
        import re
        
        # –ü–æ–ª—É—á–∞–µ–º URL API
        try:
            wialon_api_url = get_env_variable("WIALON_API_URL")
        except:
            wialon_api_url = "https://hst-api.wialon.com/wialon/ajax.html"
            logger.warning(f"WIALON_API_URL not found, using default: {wialon_api_url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"Checking token: {token[:10]}...")
        logger.debug(f"API URL: {wialon_api_url}")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–º
        login_params = {
            "svc": "token/login",
            "params": json.dumps({
                "token": token,
                "fl": 7
            })
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        logger.debug(f"API request params: {login_params}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
        login_result = await make_api_request(wialon_api_url, login_params, use_tor)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        logger.debug(f"API response: {login_result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if "error" in login_result:
            error_code = login_result.get("error")
            logger.error(f"API returned error: {error_code}")
            if error_code == 1:
                await status_message.edit_text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            elif error_code == 4:
                await status_message.edit_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞.")
            else:
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {error_code}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        if "user" in login_result and "token" in login_result:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_name = login_result["user"].get("nm", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            user_id = login_result["user"].get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            eid = login_result.get("eid", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            host = login_result.get("host", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            logger.info(f"Token check successful for user: {user_name}, EID: {eid}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_info = login_result.get("token", "{}")
            logger.debug(f"Token info from API: {token_info}")
            
            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_data = {}
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –≤ –ø–æ–ª–µ token
                tokeninfo = safe_parse_json(token_info)
                token_data.update(tokeninfo)
            except Exception as e:
                logger.error(f"Error parsing token info: {e}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            tokens_text = (
                f"üîë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ:</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}\n"
                f"üëë <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\n"
                f"üîë <b>EID:</b> {eid}\n"
                f"üåê <b>Host:</b> {host}\n\n"
                f"‚ÑπÔ∏è <i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Ç–æ–∫–µ–Ω–æ–≤. "
                f"–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ.</i>\n\n"
                f"üìã <b>–¢–æ–∫–µ–Ω:</b>\n<code>{token}</code>\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
                dur_value = token_data.get("dur")
                if dur_value is not None:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    app_name = token_data.get("app", "Wialon")
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded —Å—Ç—Ä–æ–∫–∏
                    if isinstance(app_name, str) and '%20' in app_name:
                        app_name = urllib.parse.unquote(app_name)
                    tokens_text += f"\nüîå <b>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b> {app_name}"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
                    at_value = token_data.get("at") or token_data.get("ct") or int(time.time())
                    at_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(at_value))
                    tokens_text += f"\n‚è±Ô∏è <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:</b> {at_str}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –ª–∏ —Ç–æ–∫–µ–Ω
                    if dur_value == 0:
                        # –î–ª—è –±–µ—Å—Å—Ä–æ—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ 100 –¥–Ω–µ–π
                        tokens_text += f"\n‚åõÔ∏è <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:</b> <i>100 –¥–Ω–µ–π (—É—Å–ª–æ–≤–Ω–æ –±–µ—Å—Å—Ä–æ—á–Ω—ã–π)</i>"
                        # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ª–æ–≤–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (100 –¥–Ω–µ–π)
                        approx_end_time = at_value + 8640000  # 100 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                        end_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(approx_end_time))
                        tokens_text += f"\nüìÖ <b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</b> {end_str} (–ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏)"
                    else:
                        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
                        end_time = at_value + dur_value
                        end_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(end_time))
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è
                        days = dur_value // 86400
                        hours = (dur_value % 86400) // 3600
                        minutes = (dur_value % 3600) // 60
                        
                        if days > 0:
                            dur_str = f"{days} –¥–Ω."
                            if hours > 0:
                                dur_str += f" {hours} —á."
                        elif hours > 0:
                            dur_str = f"{hours} —á. {minutes} –º–∏–Ω."
                        else:
                            dur_str = f"{minutes} –º–∏–Ω."
                        
                        tokens_text += f"\n‚åõÔ∏è <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:</b> {dur_str}"
                        tokens_text += f"\nüìÖ <b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</b> {end_str}"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
                        if end_time < time.time():
                            tokens_text += f"\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫!</b>"
                        else:
                            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                            remaining = end_time - int(time.time())
                            if remaining > 0 and remaining < 259200:  # 3 –¥–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                                rem_days = remaining // 86400
                                rem_hours = (remaining % 86400) // 3600
                                tokens_text += f"\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {rem_days} –¥–Ω. {rem_hours} —á.!"
            except Exception as e:
                logger.error(f"Error extracting token duration: {e}")
                tokens_text += "\n‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞</i>"
        else:
            logger.error(f"Unexpected API response structure: {login_result}")
            tokens_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ."
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        keyboard = None

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–µ
        await status_message.edit_text(tokens_text, parse_mode=ParseMode.HTML)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if state:
            await state.clear()
        
    except Exception as e:
        logger.error(f"Error checking token: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        if state:
            await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ –ø–æ–ª–µ token
def safe_parse_json(json_str: str) -> dict:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç JSON —Å—Ç—Ä–æ–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏–ª–∏ –æ–±—Ä–∞–º–ª–µ–Ω–∞ –∫–∞–≤—ã—á–∫–∞–º–∏."""
    if not isinstance(json_str, str):
        logger.warning(f"Expected string for JSON parsing, got {type(json_str)}")
        return {}

    # –õ–æ–≥ –ø–µ—Ä–≤—ã—Ö 50 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.debug(f"Attempting to parse JSON: {json_str[:50]}...")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è Wialon token - –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    # https://sdk.wialon.com/wiki/ru/sidebar/remoteapi/codesamples/login
    # "token": "{"app":"Wialon Hosting","ct":1443682655,"at":1443682655,"dur":2592000,"fl":-1,"p":"{}","items":[]}"
    if "app" in json_str and "dur" in json_str:
        try:
            import re
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è dur –Ω–∞–ø—Ä—è–º—É—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
            dur_match = re.search(r'"dur"\s*:\s*(\d+)', json_str)
            if dur_match:
                dur_value = int(dur_match.group(1))
                logger.info(f"Extracted duration value: {dur_value} seconds ({dur_value//86400} days)")
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                at_match = re.search(r'"at"\s*:\s*(\d+)', json_str)
                at_value = int(at_match.group(1)) if at_match else None
                
                # –ï—Å–ª–∏ –Ω–µ—Ç at, –ø—Ä–æ–≤–µ—Ä—è–µ–º ct (–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è)
                if not at_value:
                    ct_match = re.search(r'"ct"\s*:\s*(\d+)', json_str)
                    at_value = int(ct_match.group(1)) if ct_match else int(time.time())
                at_value = int(at_match.group(1)) if at_match else int(time.time())
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                app_match = re.search(r'"app"\s*:\s*"([^"]+)"', json_str)
                app_name = app_match.group(1) if app_match else "Wialon"
                
                return {
                    "dur": dur_value,
                    "at": at_value,
                    "app": app_name
                }
        except Exception as e:
            logger.error(f"Error extracting Wialon token data with regex: {e}")
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        result = json.loads(json_str)
        logger.debug("Successfully parsed JSON directly")
        return result
    except:
        try:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–Ω–æ–≤–∞
            if json_str.startswith('"') and json_str.endswith('"'):
                cleaned = json_str[1:-1].replace('\\"', '"')
                result = json.loads(cleaned)
                logger.debug("Successfully parsed JSON after removing quotes")
                return result
        except:
            pass
        
        try:
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ
            alt_json = json_str.replace("'", '"')
            result = json.loads(alt_json)
            logger.debug("Successfully parsed JSON after replacing single quotes")
            return result
        except:
            pass
    
        try:
            # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            import re
            # –ù–∞–π–¥–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ dur
            dur_match = re.search(r'"dur"\s*:\s*(\d+)', json_str)
            if dur_match:
                dur_value = int(dur_match.group(1))
                logger.debug(f"Extracted dur={dur_value} using regex")
                
                # –ù–∞–π–¥–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ at –∏–ª–∏ ct
                at_match = re.search(r'"(?:at|ct)"\s*:\s*(\d+)', json_str)
                at_value = int(at_match.group(1)) if at_match else 0
                
                return {"dur": dur_value, "at": at_value}
        except:
            pass
    
    logger.warning(f"Failed to parse JSON: {json_str[:30]}...")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    return {}

@dp.callback_query(lambda c: c.data == "delete_all_tokens")
async def process_delete_all_tokens(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ",
                    callback_data="confirm_delete_all"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_delete_all"
                )
            ]
        ]
    )
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>–í–°–ï</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "confirm_delete_all")
async def process_confirm_delete_all(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    token_storage.delete_all_user_tokens(user_id)
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    await callback_query.message.edit_text(
        "‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "cancel_delete_all")
async def process_cancel_delete_all(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    await callback_query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–∫–µ–Ω–æ–≤
    await token_list_command(callback_query.message)

@dp.message(Command(commands=['create_token']))
async def create_token_command(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ."""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tokens = token_storage.get_user_tokens(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é", 
            callback_data="create_token_manual"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–º–µ—é—â–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if user_tokens:
        for i, token_data in enumerate(user_tokens[:5]):  # –ù–µ –±–æ–ª–µ–µ 5 —Ç–æ–∫–µ–Ω–æ–≤
            token = token_data["token"]
            token_preview = f"{token[:10]}...{token[-10:]}" if len(token) > 25 else token
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            user_info = ""
            if "user_name" in token_data:
                user_info = f" ({token_data['user_name']})"
            
            keyboard.inline_keyboard.insert(i, [
                types.InlineKeyboardButton(
                    text=f"üîë –¢–æ–∫–µ–Ω #{i+1}{user_info}", 
                    callback_data=f"token:{i}"
                )
            ])
        
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω:"
    else:
        message_text = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é:"
    
    await message.reply(
        message_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "create_token_manual")
async def process_create_token_manual(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ."""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π:\n\n"
        "<i>–§–æ—Ä–º–∞—Ç: —Å—Ç—Ä–æ–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–æ—Å—Ç—É–ø–∞ Wialon</i>",
        parse_mode=ParseMode.HTML
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
    await state.set_state(GetTokenStates.waiting_for_source_token)

@dp.message(GetTokenStates.waiting_for_source_token)
async def process_source_token_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    source_token = message.text.strip()
    
    if not source_token:
        await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(source_token=source_token)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await show_connection_choice(message, state, source_token)

async def show_connection_choice(message, state: FSMContext, token: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    await state.update_data(source_token=token)
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üîí –ß–µ—Ä–µ–∑ Tor", callback_data="create_token:yes"),
                types.InlineKeyboardButton(text="üöÄ –ù–∞–ø—Ä—è–º—É—é", callback_data="create_token:no")
            ]
        ]
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫
    if hasattr(message, 'reply'):
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ Message
        await message.reply(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç callback_query
        await message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )

@dp.callback_query(lambda c: c.data.startswith("token:"))
async def process_token_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–∫–µ–Ω–∞
    index = int(callback_query.data.split(":")[1])
    user_tokens = token_storage.get_user_tokens(callback_query.from_user.id)
    token = user_tokens[index]["token"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    await state.update_data(source_token=token)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await show_connection_choice(callback_query.message, state, token)

@dp.callback_query(lambda c: c.data.startswith("create_token:"))
async def process_create_token(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API."""
    try:
        await callback_query.answer()
        use_tor = callback_query.data.split(":")[1] == "yes"
        
        data = await state.get_data()
        source_token = data.get("source_token")
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é api_operation
        api_operation = "create"
        
        if not source_token:
            await callback_query.message.edit_text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
             
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–∫–µ–Ω–∞
        if isinstance(source_token, dict):
            source_token = source_token.get("token", "")
             
        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç URL –∏ –¥—Ä—É–≥–∏—Ö –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if isinstance(source_token, str):
            # –ï—Å–ª–∏ —ç—Ç–æ URL –∏–ª–∏ JSON, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω
            if "access_token=" in source_token:
                source_token = source_token.split("access_token=")[1].split("&")[0]
            elif source_token.startswith("{") and "token" in source_token:
                try:
                    token_data = json.loads(source_token)
                    source_token = token_data.get("token", source_token)
                except:
                    pass
         
        status_message = await callback_query.message.edit_text(
            f"üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω {'—á–µ—Ä–µ–∑ Tor' if use_tor else '–Ω–∞–ø—Ä—è–º—É—é'}..."
        )
         
        # –ü–æ–ª—É—á–∞–µ–º URL API
        wialon_api_url = get_env_variable("WIALON_API_URL", "https://hst-api.wialon.com/wialon/ajax.html")
         
        # 1. –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ token/login
        login_params = {
            "svc": "token/login",
            "params": json.dumps({
                "token": source_token,
                "fl": 7  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ 7, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∫–ª—é—á–∞—è user_id
            })
        }
         
        logger.debug(f"Login params: {login_params}")
        login_result = await make_api_request(wialon_api_url, login_params, use_tor)
        logger.debug(f"Login result: {login_result}")
         
        if "error" in login_result:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_result.get('error')}")
            return
         
        # –ü–æ–ª—É—á–∞–µ–º eid –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª–æ–≥–∏–Ω–∞
        session_id = login_result.get("eid")
        if not session_id:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–µ—Å—Å–∏–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ token/login
        user_id = login_result.get("user", {}).get("id")
        if not user_id:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            return
        
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID —Å–µ—Å—Å–∏–∏: {session_id}")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ token/update
        create_params = {
            "svc": "token/update",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º token/update –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
            "params": json.dumps({
                "callMode": "create",
                "userId": str(user_id),  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
                "h": "TOKEN",
                "app": "Wialon Hosting ‚Äì a platform for GPS monitoring",
                "at": 0,
                "dur": 0,
                "fl": 8192,
                "p": "{}",  # –∏–º–µ–Ω–Ω–æ —Å—Ç—Ä–æ–∫–∞ "{}"
                "items": []
            }),
            "sid": session_id
        }
        
        logger.debug(f"Create params: {create_params}")
        create_result = await make_api_request(wialon_api_url, create_params, use_tor)
        logger.debug(f"Create result: {create_result}")
        
        if "error" in create_result:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ {('—Å–æ–∑–¥–∞–Ω–∏—è' if api_operation=='create' else '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')} —Ç–æ–∫–µ–Ω–∞: {create_result.get('reason', create_result.get('error'))}")
            return
             
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        new_token = create_result.get("h")  # –í token/update –∏–º—è —Ç–æ–∫–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø–æ–ª–µ "h"
        if not new_token:
            await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å {('—Å–æ–∑–¥–∞—Ç—å' if api_operation=='create' else '–æ–±–Ω–æ–≤–∏—Ç—å')} —Ç–æ–∫–µ–Ω")
            return
             
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
        # –ú–µ—Ç–æ–¥ add_token –≤ TokenStorage —è–≤–ª—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
        token_storage.add_token(callback_query.from_user.id, new_token, parent_token=source_token)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_info = {
            "user_name": login_result.get("au"),
            "expire_time": login_result.get("tm"),
            "created_at": int(time.time()),
            "created_via": "api",  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API
            "token_type": api_operation  # create –∏–ª–∏ update
        }
        token_storage.update_token_info(callback_query.from_user.id, new_token, token_info)
        
        await status_message.edit_text(
            f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ {('—Å–æ–∑–¥–∞–Ω' if api_operation=='create' else '–æ–±–Ω–æ–≤–ª–µ–Ω')} —á–µ—Ä–µ–∑ API!\n\n"
            f"üîë <code>{new_token}</code>",
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error creating token: {e}")
        await callback_query.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command(commands=['token_create']))
async def token_create_command(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞)."""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tokens = token_storage.get_user_tokens(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é", 
            callback_data="api_create_token_manual"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–º–µ—é—â–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if user_tokens:
        for i, token_data in enumerate(user_tokens[:5]):  # –ù–µ –±–æ–ª–µ–µ 5 —Ç–æ–∫–µ–Ω–æ–≤
            token = token_data["token"]
            token_preview = f"{token[:10]}...{token[-10:]}" if len(token) > 25 else token
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            user_info = ""
            if "user_name" in token_data:
                user_info = f" ({token_data['user_name']})"
            
            keyboard.inline_keyboard.insert(i, [
                types.InlineKeyboardButton(
                    text=f"üîë –¢–æ–∫–µ–Ω #{i+1}{user_info}", 
                    callback_data=f"api_create_token:{i}"
                )
            ])
        
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω (—á–µ—Ä–µ–∑ API):"
    else:
        message_text = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ (—á–µ—Ä–µ–∑ API):"
    
    await message.reply(
        message_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "api_create_token_manual")
async def process_api_create_token_manual(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–µ—Ä–µ–∑ API."""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π (—á–µ—Ä–µ–∑ API):\n\n"
        "<i>–§–æ—Ä–º–∞—Ç: —Å—Ç—Ä–æ–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–æ—Å—Ç—É–ø–∞ Wialon</i>",
        parse_mode=ParseMode.HTML
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
    await state.set_state(GetTokenStates.waiting_for_api_source_token)

@dp.message(GetTokenStates.waiting_for_api_source_token)
async def process_api_source_token_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è API —Å–æ–∑–¥–∞–Ω–∏—è."""
    source_token = message.text.strip()
    
    if not source_token:
        await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(source_token=source_token)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await show_api_connection_choice(message, state, source_token)

async def show_api_connection_choice(message, state: FSMContext, token: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è API —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    await state.update_data(source_token=token)
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üîí –ß–µ—Ä–µ–∑ Tor", callback_data="api_token_action:yes"),
                types.InlineKeyboardButton(text="üöÄ –ù–∞–ø—Ä—è–º—É—é", callback_data="api_token_action:no")
            ]
        ]
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫
    if hasattr(message, 'reply'):
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ Message
        await message.reply(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º:",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç callback_query
        await message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º:",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )

@dp.callback_query(lambda c: c.data.startswith("api_create_token:"))
async def process_api_token_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è API —Å–æ–∑–¥–∞–Ω–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–∫–µ–Ω–∞
    index = int(callback_query.data.split(":")[1])
    user_tokens = token_storage.get_user_tokens(callback_query.from_user.id)
    token = user_tokens[index]["token"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    await state.update_data(source_token=token, api_operation="create")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await show_api_connection_choice(callback_query.message, state, token)

@dp.callback_query(lambda c: c.data.startswith("api_token_action:"))
async def process_api_token_action(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API."""
    try:
        await callback_query.answer()
        use_tor = callback_query.data.split(":")[1] == "yes"
        
        data = await state.get_data()
        source_token = data.get("source_token")
        api_operation = data.get("api_operation", "create")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–æ–∑–¥–∞–Ω–∏–µ
        token_to_update = data.get("token_to_update")  # –¢–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ update)
        
        if not source_token:
            await callback_query.message.edit_text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
             
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ update
        if api_operation == "update" and not token_to_update:
            await callback_query.message.edit_text("‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç URL –∏ –¥—Ä—É–≥–∏—Ö –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if isinstance(source_token, str):
            if "access_token=" in source_token:
                source_token = source_token.split("access_token=")[1].split("&")[0]
            elif source_token.startswith("{") and "token" in source_token:
                try:
                    token_data = json.loads(source_token)
                    source_token = token_data.get("token", source_token)
                except:
                    pass
        
        # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if api_operation == "update" and isinstance(token_to_update, str):
            if "access_token=" in token_to_update:
                token_to_update = token_to_update.split("access_token=")[1].split("&")[0]
            elif token_to_update.startswith("{") and "token" in token_to_update:
                try:
                    token_data = json.loads(token_to_update)
                    token_to_update = token_data.get("token", token_to_update)
                except:
                    pass
        
        status_message = await callback_query.message.edit_text(
            f"üîÑ {('–°–æ–∑–¥–∞–µ–º' if api_operation=='create' else '–û–±–Ω–æ–≤–ª—è–µ–º')} —Ç–æ–∫–µ–Ω {'—á–µ—Ä–µ–∑ Tor' if use_tor else '–Ω–∞–ø—Ä—è–º—É—é'}..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º URL API
        wialon_api_url = get_env_variable("WIALON_API_URL", "https://hst-api.wialon.com/wialon/ajax.html")
        
        # 1. –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ token/login
        login_params = {
            "svc": "token/login",
            "params": json.dumps({
                "token": source_token,
                "fl": 7  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ 7, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∫–ª—é—á–∞—è user_id
            })
        }
        
        logger.debug(f"Login params: {login_params}")
        login_result = await make_api_request(wialon_api_url, login_params, use_tor)
        logger.debug(f"Login result: {login_result}")
        
        if "error" in login_result:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_result.get('error')}")
            return
             
        # –ü–æ–ª—É—á–∞–µ–º eid –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª–æ–≥–∏–Ω–∞
        session_id = login_result.get("eid")
        if not session_id:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–µ—Å—Å–∏–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ token/login
        user_id = login_result.get("user", {}).get("id")
        if not user_id:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            return
        
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID —Å–µ—Å—Å–∏–∏: {session_id}")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ token/update
        params = {
            "callMode": api_operation,  # "create" –∏–ª–∏ "update"
            "userId": str(user_id),     # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            "h": "TOKEN" if api_operation == "create" else token_to_update,  # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
            "app": "Wialon Hosting ‚Äì a platform for GPS monitoring",
            "at": 0,
            "dur": 0,
            "fl": 8192,
            "p": "{}",  # –∏–º–µ–Ω–Ω–æ —Å—Ç—Ä–æ–∫–∞ "{}"
            "items": []
        }
        
        create_params = {
            "svc": "token/update",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º token/update –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
            "params": json.dumps(params),
            "sid": session_id
        }
        
        logger.debug(f"Create params: {create_params}")
        create_result = await make_api_request(wialon_api_url, create_params, use_tor)
        logger.debug(f"Create result: {create_result}")
        
        if "error" in create_result:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ {('—Å–æ–∑–¥–∞–Ω–∏—è' if api_operation=='create' else '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')} —Ç–æ–∫–µ–Ω–∞: {create_result.get('reason', create_result.get('error'))}")
            return
             
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        new_token = create_result.get("h")  # –í token/update –∏–º—è —Ç–æ–∫–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø–æ–ª–µ "h"
        if not new_token:
            await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å {('—Å–æ–∑–¥–∞—Ç—å' if api_operation=='create' else '–æ–±–Ω–æ–≤–∏—Ç—å')} —Ç–æ–∫–µ–Ω")
            return
             
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
        # –ú–µ—Ç–æ–¥ add_token –≤ TokenStorage —è–≤–ª—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
        if api_operation == "create":
            # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π
            token_storage.add_token(callback_query.from_user.id, new_token, parent_token=source_token)
        else:
            # –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö
            token_storage.add_token(callback_query.from_user.id, new_token, parent_token=token_to_update)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_info = {
            "user_name": login_result.get("au"),
            "expire_time": login_result.get("tm"),
            "created_at": int(time.time()),
            "created_via": "api",  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API
            "token_type": api_operation  # create –∏–ª–∏ update
        }
        token_storage.update_token_info(callback_query.from_user.id, new_token, token_info)
        
        await status_message.edit_text(
            f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ {('—Å–æ–∑–¥–∞–Ω' if api_operation=='create' else '–æ–±–Ω–æ–≤–ª–µ–Ω')} —á–µ—Ä–µ–∑ API!\n\n"
            f"üîë <code>{new_token}</code>",
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error in API token operation: {e}")
        await callback_query.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command(commands=['token_update']))
async def token_update_command(message: types.Message, state: FSMContext):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API."""
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    user_tokens = token_storage.get_user_tokens(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é", 
            callback_data="api_update_token_manual"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–º–µ—é—â–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if user_tokens:
        for i, token_data in enumerate(user_tokens[:5]):  # –ù–µ –±–æ–ª–µ–µ 5 —Ç–æ–∫–µ–Ω–æ–≤
            token = token_data["token"]
            token_preview = f"{token[:10]}...{token[-10:]}" if len(token) > 25 else token
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            user_info = ""
            if "user_name" in token_data:
                user_info = f" ({token_data['user_name']})"
            
            keyboard.inline_keyboard.insert(i, [
                types.InlineKeyboardButton(
                    text=f"üîë –¢–æ–∫–µ–Ω #{i+1}{user_info}", 
                    callback_data=f"api_update_token:{i}"
                )
            ])
        
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ <b>–∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω</b> –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∏—Å—Ç–æ—á–Ω–∏–∫):"
    else:
        message_text = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ <b>–∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω</b> –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:"
    
    await message.reply(
        message_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "api_update_token_manual")
async def process_api_update_token_manual(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API."""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω</b> –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
        "<i>–§–æ—Ä–º–∞—Ç: —Å—Ç—Ä–æ–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–æ—Å—Ç—É–ø–∞ Wialon</i>",
        parse_mode=ParseMode.HTML
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
    await state.set_state(GetTokenStates.waiting_for_api_update_token)

@dp.message(GetTokenStates.waiting_for_api_update_token)
async def process_api_update_token_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    source_token = message.text.strip()
    
    if not source_token:
        await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(source_token=source_token)
    
    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await message.reply(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b> (–∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å):",
        parse_mode=ParseMode.HTML
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await state.set_state(GetTokenStates.waiting_for_token_to_update)

@dp.message(GetTokenStates.waiting_for_token_to_update)
async def process_token_to_update_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å."""
    token_to_update = message.text.strip()
    
    if not token_to_update:
        await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    await state.update_data(token_to_update=token_to_update, api_operation="update")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    data = await state.get_data()
    source_token = data.get("source_token")
    await show_api_connection_choice(message, state, source_token)

@dp.callback_query(lambda c: c.data.startswith("api_update_token:"))
async def process_api_update_token_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–∫–µ–Ω–∞
    index = int(callback_query.data.split(":")[1])
    user_tokens = token_storage.get_user_tokens(callback_query.from_user.id)
    token = user_tokens[index]["token"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
    await state.update_data(source_token=token)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é", 
            callback_data="token_to_update_manual"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤, –∏—Å–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π
    added_tokens = 0
    for i, token_data in enumerate(user_tokens):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
        if i == index:
            continue
            
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ç–æ–∫–µ–Ω–æ–≤
        if added_tokens >= 5:
            break
            
        token_to_update = token_data["token"]
        token_preview = f"{token_to_update[:10]}...{token_to_update[-10:]}" if len(token_to_update) > 25 else token_to_update
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        user_info = ""
        if "user_name" in token_data:
            user_info = f" ({token_data['user_name']})"
        
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text=f"üîë –¢–æ–∫–µ–Ω #{i+1}{user_info}", 
                callback_data=f"token_to_update:{i}"
            )
        ])
        added_tokens += 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await callback_query.message.edit_text(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>—Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "token_to_update_manual")
async def process_token_to_update_manual(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å."""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>:\n\n"
        "<i>–§–æ—Ä–º–∞—Ç: —Å—Ç—Ä–æ–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–æ—Å—Ç—É–ø–∞ Wialon</i>",
        parse_mode=ParseMode.HTML
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
    await state.set_state(GetTokenStates.waiting_for_token_to_update)

@dp.callback_query(lambda c: c.data.startswith("token_to_update:"))
async def process_token_to_update_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–∫–µ–Ω–∞
    index = int(callback_query.data.split(":")[1])
    user_tokens = token_storage.get_user_tokens(callback_query.from_user.id)
    token_to_update = user_tokens[index]["token"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    await state.update_data(token_to_update=token_to_update, api_operation="update")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    data = await state.get_data()
    source_token = data.get("source_token")
    await show_api_connection_choice(callback_query.message, state, source_token)

@dp.callback_query(lambda c: c.data == "use_saved_credentials")
async def process_use_saved_credentials(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    credentials = token_storage.get_credentials(callback_query.from_user.id)
    if not credentials:
        await callback_query.message.edit_text("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üîí –ß–µ—Ä–µ–∑ Tor", callback_data="saved_creds_tor:yes"),
                types.InlineKeyboardButton(text="üöÄ –ù–∞–ø—Ä—è–º—É—é", callback_data="saved_creds_tor:no")
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è <b>{credentials['username']}</b>.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data.startswith("saved_creds_tor:"))
async def process_saved_creds_connection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    await callback_query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Tor
    use_tor = callback_query.data.split(":")[1] == "yes"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    credentials = token_storage.get_credentials(callback_query.from_user.id)
    if not credentials:
        await callback_query.message.edit_text("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    status_message = await callback_query.message.edit_text(
        f"üîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è <b>{credentials['username']}</b> {'—á–µ—Ä–µ–∑ Tor' if use_tor else '–Ω–∞–ø—Ä—è–º—É—é'}...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL Wialon –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        try:
            wialon_url = get_env_variable("WIALON_BASE_URL")
        except:
            wialon_url = "https://hosting.wialon.com/login.html?duration=0"
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        result = await wialon_login_and_get_url(
            credentials['username'], 
            credentials['password'], 
            wialon_url,
            use_tor=use_tor
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if isinstance(result, dict):
            token = result.get("token", "")
            full_url = result.get("url", "")
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            token = extract_token_from_url(result)
            full_url = result
        
        if token:
            token_storage.add_token(callback_query.from_user.id, token)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_info = {
                "user_name": credentials['username'],
                "created_at": int(time.time()),
                "created_via": "saved_credentials"
            }
            token_storage.update_token_info(callback_query.from_user.id, token, token_info)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            url_info = f"\n\nüåê <b>URL:</b>\n<code>{full_url}</code>" if full_url else ""
            
            await status_message.edit_text(
                f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"üîë <code>{token}</code>"
                f"{url_info}",
                parse_mode=ParseMode.HTML
            )
        else:
            # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –±—ã–ª –∏–∑–≤–ª–µ—á–µ–Ω
            url_display = full_url if isinstance(full_url, str) else str(result)
            await status_message.edit_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <code>{url_display}</code>",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"Error using saved credentials: {e}")
        await status_message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}",
            parse_mode=ParseMode.HTML
        )

@dp.callback_query(lambda c: c.data == "delete_saved_credentials")
async def process_delete_credentials(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    await callback_query.answer()
    
    # –£–¥–∞–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    token_storage.delete_credentials(callback_query.from_user.id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üîí –ß–µ—Ä–µ–∑ Tor", callback_data="use_tor:yes"),
                types.InlineKeyboardButton(text="üöÄ –ù–∞–ø—Ä—è–º—É—é", callback_data="use_tor:no")
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wialon:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith("save_credentials:"))
async def process_save_credentials(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = callback_query.data.split(":", 2)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 —á–∞—Å—Ç–µ–π
    if len(parts) != 3:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return
    
    username = parts[1]
    password = parts[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        token_storage.save_credentials(callback_query.from_user.id, username, password)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    current_text = callback_query.message.text
    if "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" in current_text:
        new_text = current_text.split("\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")[0]
    else:
        new_text = current_text
        
    new_text += "\n\n‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞."
    
    await callback_query.message.edit_text(
        new_text,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "not_save_credentials")
async def process_not_save_credentials(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    await callback_query.answer()
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    current_text = callback_query.message.text
    if "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" in current_text:
        new_text = current_text.split("\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")[0]
    else:
        new_text = current_text
    
    await callback_query.message.edit_text(
        new_text,
        parse_mode=ParseMode.HTML
    )

@dp.message(Command(commands=['export_tokens']))
async def export_tokens_command(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ CSV-—Ñ–∞–π–ª."""
    user_tokens = token_storage.get_user_tokens(message.from_user.id)
    
    if not user_tokens:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
    output = io.StringIO()
    csv_writer = csv.writer(output)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["Token", "User", "Created At", "Expires At", "Created Via", 
               "Operation Type", "Parent Token", "Days Left", "Status"]
    csv_writer.writerow(headers)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö
    for token_data in user_tokens:
        token = token_data["token"]
        user_name = token_data.get("user_name", "")
        created_at = datetime.datetime.fromtimestamp(token_data.get("created_at", 0)).strftime('%Y-%m-%d %H:%M:%S') if "created_at" in token_data else ""
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        expires_at = ""
        days_left = ""
        status = "Active"
        if "expire_time" in token_data and token_data["expire_time"]:
            expire_time = int(token_data["expire_time"])
            expires_at = datetime.datetime.fromtimestamp(expire_time).strftime('%Y-%m-%d %H:%M:%S')
            
            if expire_time < time.time():
                status = "Expired"
                days_left = "0"
            else:
                days_left = str(int((expire_time - time.time()) / 86400))
        
        created_via = token_data.get("created_via", "")
        operation_type = token_data.get("token_type", "")
        parent_token = token_data.get("parent_token", "")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ CSV
        csv_writer.writerow([
            token, user_name, created_at, expires_at, created_via, 
            operation_type, parent_token, days_left, status
        ])
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    output.seek(0)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    current_time = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"wialon_tokens_{current_time}.csv"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply_document(
        types.BufferedInputFile(
            output.getvalue().encode('utf-8'),
            filename=filename
        ),
        caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(user_tokens)} —Ç–æ–∫–µ–Ω–æ–≤"
    )
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º StringIO
    output.close()

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
    logger.info("Starting Telegram bot...")
    await dp.start_polling(bot)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await start_telegram_bot()

if __name__ == '__main__':
    asyncio.run(main())