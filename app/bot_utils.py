from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.states import GetTokenStates
from app.utils import get_bool_env_variable
from app.states import GetTokenStates
from app.database import AsyncSessionLocal
from app.db_utils import get_all_user_tokens
from app.utils import logger
from aiogram.enums import ParseMode

def get_tor_choice_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (Tor/–ø—Ä—è–º–æ–π)."""
    buttons = [
        [
            types.InlineKeyboardButton(text="üîí –ß–µ—Ä–µ–∑ Tor", callback_data="check_tor:yes"),
            types.InlineKeyboardButton(text="üöÄ –ù–∞–ø—Ä—è–º—É—é", callback_data="check_tor:no")
        ]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_manual_token_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞."""
    buttons = [
        [types.InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é", callback_data="check_token_manual")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirm_delete_all_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    buttons = [
        [
            types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_delete_all"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_all")
        ]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_connection_choice_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞."""
    buttons = [
        [
            types.InlineKeyboardButton(text="üîí –ß–µ—Ä–µ–∑ Tor", callback_data="use_tor:yes"),
            types.InlineKeyboardButton(text="üöÄ –ù–∞–ø—Ä—è–º—É—é", callback_data="use_tor:no")
        ]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_saved_creds_connection_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    buttons = [
        [
            types.InlineKeyboardButton(text="üîí –ß–µ—Ä–µ–∑ Tor", callback_data="saved_creds_tor:yes"),
            types.InlineKeyboardButton(text="üöÄ –ù–∞–ø—Ä—è–º—É—é", callback_data="saved_creds_tor:no")
        ]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

async def choose_check_mode(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ (—á–µ—Ä–µ–∑ Tor –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é).
    –ï—Å–ª–∏ USE_TOR=1 –≤ .env, —Ç–æ –≤—ã–±–æ—Ä –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è, –∞ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Tor.
    """
    force_tor = get_bool_env_variable("USE_TOR", False)
    if force_tor:
        # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ Tor
        await state.update_data(use_tor=True)
        return
    
    # –ï—Å–ª–∏ –≤—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à—ë–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_tor_choice_keyboard()
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:",
        reply_markup=keyboard
    )

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ ---
async def handle_check_token_manual(callback_query, state):
    await callback_query.answer()
    await callback_query.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
        "<i>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</i>\n"
        "<code>/check_token YOUR_TOKEN</code>",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(GetTokenStates.waiting_for_token_input)

async def handle_token_input(message, state, choose_check_mode_func):
    token = message.text.strip()
    if not token:
        await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    await state.update_data(token=token)
    await choose_check_mode_func(message, state)

async def handle_check_specific_token(callback_query, state, choose_check_mode_func):
    await callback_query.answer()
    token_prefix = callback_query.data.split(":")[1]
    async with AsyncSessionLocal() as session:
        user_tokens = await get_all_user_tokens(session)
    full_token = None
    for token_data in user_tokens:
        if token_data["token"].startswith(token_prefix):
            full_token = token_data["token"]
            break
    if not full_token:
        await callback_query.message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        return
    await state.update_data(token=full_token)
    await choose_check_mode_func(callback_query.message, state)

async def handle_check_mode_choice(callback_query, state, check_token_process_func):
    await callback_query.answer()
    use_tor = callback_query.data.split(":")[1] == "yes"
    data = await state.get_data()
    token = data.get("token")
    if not token:
        await callback_query.message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    await check_token_process_func(callback_query.message, token, use_tor, state)
